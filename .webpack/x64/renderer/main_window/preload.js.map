{"version":3,"file":"main_window/preload.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,W,GCCrBC,EAA2B,CAAC,ECEhC,MAAM,cAAEC,EAAa,YAAEC,GDCvB,SAASC,EAAoBC,GAE5B,IAAIC,EAAeL,EAAyBI,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaP,QAGrB,IAAID,EAASG,EAAyBI,GAAY,CAGjDN,QAAS,CAAC,GAOX,OAHAS,EAAoBH,GAAUP,EAAQA,EAAOC,QAASK,GAG/CN,EAAOC,OACf,CCnBuCC,CAAQ,KAE/CE,EAAcO,kBAAkB,cAAe,CAE7CC,aAAeC,GAAaR,EAAYS,OAAO,gBAAiBD,GAGhEE,eAAiBC,GAASX,EAAYS,OAAO,kBAAmBE,GAChEC,iBAAmBC,GAAab,EAAYc,GAAG,kBAAmBD,GAGlEE,WAAYA,IAAMf,EAAYS,OAAO,eACrCO,mBAAoBA,IAAMhB,EAAYS,OAAO,yB","sources":["webpack://clipforge/external commonjs2 \"electron\"","webpack://clipforge/webpack/bootstrap","webpack://clipforge/./src/preload.js"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// See the Electron documentation for details on how to use preload scripts:\n// https://www.electronjs.org/docs/latest/tutorial/process-model#preload-scripts\n\nconst { contextBridge, ipcRenderer } = require('electron');\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  // File operations\n  readMetadata: (filePath) => ipcRenderer.invoke('read-metadata', filePath),\n  \n  // Export operations\n  exportTimeline: (data) => ipcRenderer.invoke('export-timeline', data),\n  onExportProgress: (callback) => ipcRenderer.on('export-progress', callback),\n  \n  // Utility\n  selectFile: () => ipcRenderer.invoke('select-file'),\n  selectSaveLocation: () => ipcRenderer.invoke('select-save-location')\n});\n"],"names":["module","exports","require","__webpack_module_cache__","contextBridge","ipcRenderer","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","exposeInMainWorld","readMetadata","filePath","invoke","exportTimeline","data","onExportProgress","callback","on","selectFile","selectSaveLocation"],"sourceRoot":""}