"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateclipforge"]("main_window",{

/***/ "./src/App.jsx":
/*!*********************!*\
  !*** ./src/App.jsx ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/circle-question-mark.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/download.js\");\n/* harmony import */ var _utils_toastContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/toastContext */ \"./src/utils/toastContext.js\");\n/* harmony import */ var _utils_uuid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/uuid */ \"./src/utils/uuid.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/constants */ \"./src/utils/constants.js\");\n/* harmony import */ var _components_FileImporter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/FileImporter */ \"./src/components/FileImporter.jsx\");\n/* harmony import */ var _components_TimelineContainer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/TimelineContainer */ \"./src/components/TimelineContainer.jsx\");\n/* harmony import */ var _components_VideoPreview__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/VideoPreview */ \"./src/components/VideoPreview.jsx\");\n/* harmony import */ var _components_ClipEditor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/ClipEditor */ \"./src/components/ClipEditor.jsx\");\n/* harmony import */ var _components_ExportDialog__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/ExportDialog */ \"./src/components/ExportDialog.jsx\");\n/* harmony import */ var _components_HelpDialog__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/HelpDialog */ \"./src/components/HelpDialog.jsx\");\n/* harmony import */ var _components_Notifications__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/Notifications */ \"./src/components/Notifications.jsx\");\n/* harmony import */ var _styles_main_css__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./styles/main.css */ \"./src/styles/main.css\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Main App Component (wrapped with ToastProvider)\n */\nfunction AppContent() {\n  const [clips, setClips] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n  const [selectedClipId, setSelectedClipId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n  const [currentPlaybackTime, setCurrentPlaybackTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  const [isImporting, setIsImporting] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [shouldAutoPlay, setShouldAutoPlay] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n\n  // Export state\n  const [showExportDialog, setShowExportDialog] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [isExporting, setIsExporting] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [exportProgress, setExportProgress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  const [exportError, setExportError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n  const [showHelpDialog, setShowHelpDialog] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const videoPreviewRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const {\n    showToast\n  } = (0,_utils_toastContext__WEBPACK_IMPORTED_MODULE_3__.useToast)();\n\n  /**\n   * Calculate cumulative timeline position for a given clip and time within that clip\n   * @param {string} clipId - ID of the clip\n   * @param {number} timeInClip - Time within the clip\n   * @returns {number} Cumulative timeline position\n   */\n  const calculateTimelinePosition = (clipId, timeInClip) => {\n    const clipIndex = clips.findIndex(clip => clip.id === clipId);\n    if (clipIndex === -1) return 0;\n    let cumulativeTime = 0;\n\n    // Add duration of all previous clips\n    for (let i = 0; i < clipIndex; i++) {\n      const clip = clips[i];\n      const trimmedDuration = (clip.trimEnd || clip.duration || 0) - (clip.trimStart || 0);\n      cumulativeTime += trimmedDuration;\n    }\n\n    // Add the current time within the current clip\n    cumulativeTime += timeInClip;\n    return cumulativeTime;\n  };\n\n  // Listen for export progress updates\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const handleExportProgress = (event, progress) => {\n      setExportProgress(progress);\n    };\n    window.electronAPI.onExportProgress(handleExportProgress);\n    return () => {\n      // Cleanup listener when component unmounts\n      window.electronAPI.removeAllListeners('export-progress');\n    };\n  }, []);\n\n  // Keyboard shortcut for export (Cmd+E)\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const handleKeyDown = e => {\n      if ((e.metaKey || e.ctrlKey) && e.key === 'e') {\n        e.preventDefault();\n        if (clips.length > 0) {\n          setShowExportDialog(true);\n        } else {\n          showToast('No clips to export', 'warning');\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [clips.length, showToast]);\n\n  /**\n   * Handle file imports\n   * @param {string[]} filePaths - Array of file paths to import\n   */\n  const handleImportFiles = async filePaths => {\n    setIsImporting(true);\n    let successCount = 0;\n    let errorCount = 0;\n    for (const filePath of filePaths) {\n      try {\n        // Call IPC to extract metadata\n        const result = await window.electronAPI.readMetadata(filePath);\n\n        // Check if metadata extraction succeeded\n        if (!result.success) {\n          console.error('[App] Metadata extraction failed:', result.error);\n          errorCount++;\n          const fileName = filePath.split('/').pop();\n          const errorMessage = result.error.message || _utils_constants__WEBPACK_IMPORTED_MODULE_5__.ERROR_MESSAGES[result.error.type] || _utils_constants__WEBPACK_IMPORTED_MODULE_5__.ERROR_MESSAGES.UNKNOWN;\n          showToast(`${fileName}: ${errorMessage}`, 'error', 5000);\n          continue;\n        }\n        const metadata = result.data;\n\n        // Create clip object\n        const newClip = {\n          id: (0,_utils_uuid__WEBPACK_IMPORTED_MODULE_4__.generateUuid)(),\n          fileName: filePath.split('/').pop(),\n          filePath,\n          source: 'import',\n          duration: metadata.duration,\n          width: metadata.width,\n          height: metadata.height,\n          thumbnail: metadata.thumbnail,\n          trimStart: 0,\n          trimEnd: metadata.duration,\n          order: clips.length + successCount,\n          track: 'main'\n        };\n\n        // Add to clips state\n        setClips(prev => [...prev, newClip]);\n        successCount++;\n      } catch (err) {\n        console.error('[App] Unexpected import error:', err);\n        errorCount++;\n        const fileName = filePath.split('/').pop();\n        showToast(`Failed to import ${fileName}: Unexpected error`, 'error');\n      }\n    }\n    setIsImporting(false);\n\n    // Show success message\n    if (successCount > 0) {\n      showToast(`Successfully imported ${successCount} clip${successCount !== 1 ? 's' : ''}`, 'success');\n    }\n    if (errorCount > 0 && successCount === 0) {\n      showToast(`Failed to import ${errorCount} file${errorCount !== 1 ? 's' : ''}`, 'error');\n    }\n  };\n\n  /**\n   * Handle clip deletion\n   * @param {string} clipId - ID of clip to delete\n   */\n  const handleDeleteClip = clipId => {\n    const clip = clips.find(c => c.id === clipId);\n    if (!clip) return;\n\n    // Show confirmation dialog\n    const confirmed = window.confirm(`Delete \"${clip.fileName}\"?`);\n    if (!confirmed) return;\n\n    // Remove clip from state\n    setClips(clips.filter(c => c.id !== clipId));\n\n    // Clear selection if deleted clip was selected\n    if (selectedClipId === clipId) {\n      setSelectedClipId(null);\n    }\n    showToast('Clip deleted', 'success');\n  };\n\n  /**\n   * Handle clip selection\n   * @param {string} clipId - ID of clip to select\n   */\n  const handleSelectClip = clipId => {\n    setSelectedClipId(clipId);\n  };\n\n  /**\n   * Handle trim changes for a clip\n   * @param {string} clipId - ID of clip to trim\n   * @param {number} trimStart - New trim start time in seconds\n   * @param {number} trimEnd - New trim end time in seconds\n   */\n  const handleTrimChange = (clipId, trimStart, trimEnd) => {\n    setClips(prev => prev.map(clip => clip.id === clipId ? {\n      ...clip,\n      trimStart,\n      trimEnd\n    } : clip));\n    showToast('Clip trimmed', 'success');\n  };\n\n  /**\n   * Handle clip reordering via drag and drop\n   * @param {number} oldIndex - Original index of the clip\n   * @param {number} newIndex - New index for the clip\n   */\n  const handleReorderClips = (oldIndex, newIndex) => {\n    if (oldIndex === newIndex) return;\n\n    // Create a copy of the clips array\n    const newClips = Array.from(clips);\n\n    // Remove the clip from old position\n    const [movedClip] = newClips.splice(oldIndex, 1);\n\n    // Insert at new position\n    newClips.splice(newIndex, 0, movedClip);\n\n    // Update order property for all clips\n    newClips.forEach((clip, index) => {\n      clip.order = index;\n    });\n    setClips(newClips);\n    showToast('Clip reordered', 'success');\n  };\n\n  /**\n   * Handle seeking to a specific time in the timeline\n   * @param {number} time - Time in seconds to seek to\n   */\n  const handleSeekToTime = time => {\n    if (videoPreviewRef.current) {\n      videoPreviewRef.current.seekTo(time);\n    }\n  };\n\n  /**\n   * Handle clip ending - move to next clip for continuous playback\n   */\n  const handleClipEnded = () => {\n    if (clips.length === 0) return;\n    const currentIndex = clips.findIndex(clip => clip.id === selectedClipId);\n    if (currentIndex === -1) return;\n\n    // Move to next clip if available\n    const nextIndex = currentIndex + 1;\n    if (nextIndex < clips.length) {\n      const nextClip = clips[nextIndex];\n      setSelectedClipId(nextClip.id);\n      setShouldAutoPlay(true); // Signal to auto-play the next clip\n\n      // Calculate cumulative timeline position up to the next clip\n      let cumulativeTime = 0;\n      for (let i = 0; i < nextIndex; i++) {\n        const clip = clips[i];\n        const trimmedDuration = (clip.trimEnd || clip.duration || 0) - (clip.trimStart || 0);\n        cumulativeTime += trimmedDuration;\n      }\n\n      // Add the trim start of the next clip\n      cumulativeTime += nextClip.trimStart || 0;\n      setCurrentPlaybackTime(cumulativeTime);\n    } else {\n      // No more clips, stop playback\n      setCurrentPlaybackTime(0);\n    }\n  };\n\n  /**\n   * Handle export request\n   * @param {string} outputPath - Path where to save the exported video\n   */\n  const handleExport = async outputPath => {\n    setIsExporting(true);\n    setExportProgress(0);\n    setExportError(null);\n    try {\n      const result = await window.electronAPI.exportTimeline({\n        clips,\n        outputPath\n      });\n      if (result.success) {\n        showToast(`✓ Video exported successfully to ${outputPath.split('/').pop()}`, 'success', 5000);\n        setShowExportDialog(false);\n      } else {\n        const errorMessage = result.error.message || 'Export failed';\n        setExportError(errorMessage);\n        showToast(`Export failed: ${errorMessage}`, 'error', 5000);\n      }\n    } catch (err) {\n      console.error('[App] Export error:', err);\n      const errorMessage = err.message || 'Export failed';\n      setExportError(errorMessage);\n      showToast(`Export failed: ${errorMessage}`, 'error', 5000);\n    } finally {\n      setIsExporting(false);\n      setExportProgress(0);\n    }\n  };\n\n  /**\n   * Handle export dialog close\n   */\n  const handleCloseExportDialog = () => {\n    if (!isExporting) {\n      setShowExportDialog(false);\n      setExportError(null);\n      setExportProgress(0);\n    }\n  };\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"app-container\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n    className: \"help-button\",\n    onClick: () => setShowHelpDialog(true),\n    title: \"Help & Shortcuts\",\n    \"aria-label\": \"Open help dialog\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(lucide_react__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n    size: 20\n  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"main-content\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"aside\", {\n    className: \"media-panel\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_FileImporter__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n    onImportFiles: handleImportFiles,\n    isLoading: isImporting\n  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"main\", {\n    className: \"preview-panel\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_VideoPreview__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n    ref: videoPreviewRef,\n    clip: clips.find(c => c.id === selectedClipId) || null,\n    onPlaybackChange: setCurrentPlaybackTime,\n    onClipEnded: handleClipEnded,\n    shouldAutoPlay: shouldAutoPlay,\n    onAutoPlayStarted: () => setShouldAutoPlay(false)\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_ClipEditor__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n    clip: clips.find(c => c.id === selectedClipId) || null,\n    onTrimChange: handleTrimChange\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"export-section\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n    className: \"export-button\",\n    onClick: () => setShowExportDialog(true),\n    disabled: clips.length === 0 || isExporting\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n    size: 20\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", null, \"Export Timeline (\", clips.length, \" clip\", clips.length !== 1 ? 's' : '', \")\"))))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_TimelineContainer__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n    clips: clips,\n    selectedClipId: selectedClipId,\n    onSelectClip: handleSelectClip,\n    onDeleteClip: handleDeleteClip,\n    playheadPosition: currentPlaybackTime,\n    onSeekToTime: handleSeekToTime,\n    onTrimChange: handleTrimChange\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_ExportDialog__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n    isOpen: showExportDialog,\n    onClose: handleCloseExportDialog,\n    clips: clips,\n    onExport: handleExport,\n    isExporting: isExporting,\n    exportProgress: exportProgress,\n    exportError: exportError\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_HelpDialog__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n    isOpen: showHelpDialog,\n    onClose: () => setShowHelpDialog(false)\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_Notifications__WEBPACK_IMPORTED_MODULE_12__[\"default\"], null));\n}\n\n/**\n * App Component with ToastProvider\n */\nfunction App() {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_utils_toastContext__WEBPACK_IMPORTED_MODULE_3__.ToastProvider, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(AppContent, null));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/App.jsx\n\n}");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("4e997f0faab833d9d910")
/******/ })();
/******/ 
/******/ }
);