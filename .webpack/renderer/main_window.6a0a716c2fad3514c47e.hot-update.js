"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateclipforge"]("main_window",{

/***/ "./src/App.jsx":
/*!*********************!*\
  !*** ./src/App.jsx ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/circle-question-mark.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/download.js\");\n/* harmony import */ var _utils_toastContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/toastContext */ \"./src/utils/toastContext.js\");\n/* harmony import */ var _utils_uuid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/uuid */ \"./src/utils/uuid.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/constants */ \"./src/utils/constants.js\");\n/* harmony import */ var _components_FileImporter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/FileImporter */ \"./src/components/FileImporter.jsx\");\n/* harmony import */ var _components_TimelineContainer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/TimelineContainer */ \"./src/components/TimelineContainer.jsx\");\n/* harmony import */ var _components_VideoPreview__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/VideoPreview */ \"./src/components/VideoPreview.jsx\");\n/* harmony import */ var _components_ClipEditor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/ClipEditor */ \"./src/components/ClipEditor.jsx\");\n/* harmony import */ var _components_ExportDialog__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/ExportDialog */ \"./src/components/ExportDialog.jsx\");\n/* harmony import */ var _components_HelpDialog__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/HelpDialog */ \"./src/components/HelpDialog.jsx\");\n/* harmony import */ var _components_Notifications__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/Notifications */ \"./src/components/Notifications.jsx\");\n/* harmony import */ var _styles_main_css__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./styles/main.css */ \"./src/styles/main.css\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Main App Component (wrapped with ToastProvider)\n */\nfunction AppContent() {\n  const [clips, setClips] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n  const [selectedClipId, setSelectedClipId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n  const [currentPlaybackTime, setCurrentPlaybackTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  const [isImporting, setIsImporting] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [shouldAutoPlay, setShouldAutoPlay] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n\n  // Export state\n  const [showExportDialog, setShowExportDialog] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [isExporting, setIsExporting] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [exportProgress, setExportProgress] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  const [exportError, setExportError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n  const [showHelpDialog, setShowHelpDialog] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const videoPreviewRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const {\n    showToast\n  } = (0,_utils_toastContext__WEBPACK_IMPORTED_MODULE_3__.useToast)();\n\n  // Listen for export progress updates\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const handleExportProgress = (event, progress) => {\n      setExportProgress(progress);\n    };\n    window.electronAPI.onExportProgress(handleExportProgress);\n    return () => {\n      // Cleanup listener when component unmounts\n      window.electronAPI.removeAllListeners('export-progress');\n    };\n  }, []);\n\n  // Keyboard shortcut for export (Cmd+E)\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const handleKeyDown = e => {\n      if ((e.metaKey || e.ctrlKey) && e.key === 'e') {\n        e.preventDefault();\n        if (clips.length > 0) {\n          setShowExportDialog(true);\n        } else {\n          showToast('No clips to export', 'warning');\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [clips.length, showToast]);\n\n  /**\n   * Handle file imports\n   * @param {string[]} filePaths - Array of file paths to import\n   */\n  const handleImportFiles = async filePaths => {\n    setIsImporting(true);\n    let successCount = 0;\n    let errorCount = 0;\n    for (const filePath of filePaths) {\n      try {\n        // Call IPC to extract metadata\n        const result = await window.electronAPI.readMetadata(filePath);\n\n        // Check if metadata extraction succeeded\n        if (!result.success) {\n          console.error('[App] Metadata extraction failed:', result.error);\n          errorCount++;\n          const fileName = filePath.split('/').pop();\n          const errorMessage = result.error.message || _utils_constants__WEBPACK_IMPORTED_MODULE_5__.ERROR_MESSAGES[result.error.type] || _utils_constants__WEBPACK_IMPORTED_MODULE_5__.ERROR_MESSAGES.UNKNOWN;\n          showToast(`${fileName}: ${errorMessage}`, 'error', 5000);\n          continue;\n        }\n        const metadata = result.data;\n\n        // Create clip object\n        const newClip = {\n          id: (0,_utils_uuid__WEBPACK_IMPORTED_MODULE_4__.generateUuid)(),\n          fileName: filePath.split('/').pop(),\n          filePath,\n          source: 'import',\n          duration: metadata.duration,\n          width: metadata.width,\n          height: metadata.height,\n          thumbnail: metadata.thumbnail,\n          trimStart: 0,\n          trimEnd: metadata.duration,\n          order: clips.length + successCount,\n          track: 'main'\n        };\n\n        // Add to clips state\n        setClips(prev => [...prev, newClip]);\n        successCount++;\n      } catch (err) {\n        console.error('[App] Unexpected import error:', err);\n        errorCount++;\n        const fileName = filePath.split('/').pop();\n        showToast(`Failed to import ${fileName}: Unexpected error`, 'error');\n      }\n    }\n    setIsImporting(false);\n\n    // Show success message\n    if (successCount > 0) {\n      showToast(`Successfully imported ${successCount} clip${successCount !== 1 ? 's' : ''}`, 'success');\n    }\n    if (errorCount > 0 && successCount === 0) {\n      showToast(`Failed to import ${errorCount} file${errorCount !== 1 ? 's' : ''}`, 'error');\n    }\n  };\n\n  /**\n   * Handle clip deletion\n   * @param {string} clipId - ID of clip to delete\n   */\n  const handleDeleteClip = clipId => {\n    const clip = clips.find(c => c.id === clipId);\n    if (!clip) return;\n\n    // Show confirmation dialog\n    const confirmed = window.confirm(`Delete \"${clip.fileName}\"?`);\n    if (!confirmed) return;\n\n    // Remove clip from state\n    setClips(clips.filter(c => c.id !== clipId));\n\n    // Clear selection if deleted clip was selected\n    if (selectedClipId === clipId) {\n      setSelectedClipId(null);\n    }\n    showToast('Clip deleted', 'success');\n  };\n\n  /**\n   * Handle clip selection\n   * @param {string} clipId - ID of clip to select\n   */\n  const handleSelectClip = clipId => {\n    setSelectedClipId(clipId);\n  };\n\n  /**\n   * Handle trim changes for a clip\n   * @param {string} clipId - ID of clip to trim\n   * @param {number} trimStart - New trim start time in seconds\n   * @param {number} trimEnd - New trim end time in seconds\n   */\n  const handleTrimChange = (clipId, trimStart, trimEnd) => {\n    setClips(prev => prev.map(clip => clip.id === clipId ? {\n      ...clip,\n      trimStart,\n      trimEnd\n    } : clip));\n    showToast('Clip trimmed', 'success');\n  };\n\n  /**\n   * Handle clip reordering via drag and drop\n   * @param {number} oldIndex - Original index of the clip\n   * @param {number} newIndex - New index for the clip\n   */\n  const handleReorderClips = (oldIndex, newIndex) => {\n    if (oldIndex === newIndex) return;\n\n    // Create a copy of the clips array\n    const newClips = Array.from(clips);\n\n    // Remove the clip from old position\n    const [movedClip] = newClips.splice(oldIndex, 1);\n\n    // Insert at new position\n    newClips.splice(newIndex, 0, movedClip);\n\n    // Update order property for all clips\n    newClips.forEach((clip, index) => {\n      clip.order = index;\n    });\n    setClips(newClips);\n    showToast('Clip reordered', 'success');\n  };\n\n  /**\n   * Handle seeking to a specific time in the timeline\n   * @param {number} time - Time in seconds to seek to\n   */\n  const handleSeekToTime = time => {\n    if (videoPreviewRef.current) {\n      videoPreviewRef.current.seekTo(time);\n    }\n  };\n\n  /**\n   * Handle clip ending - move to next clip for continuous playback\n   */\n  const handleClipEnded = () => {\n    if (clips.length === 0) return;\n    const currentIndex = clips.findIndex(clip => clip.id === selectedClipId);\n    if (currentIndex === -1) return;\n\n    // Move to next clip if available\n    const nextIndex = currentIndex + 1;\n    if (nextIndex < clips.length) {\n      const nextClip = clips[nextIndex];\n      setSelectedClipId(nextClip.id);\n      setShouldAutoPlay(true); // Signal to auto-play the next clip\n      setCurrentPlaybackTime(nextClip.trimStart || 0); // Move timeline to start of next clip\n    } else {\n      // No more clips, stop playback\n      setCurrentPlaybackTime(0);\n    }\n  };\n\n  /**\n   * Handle export request\n   * @param {string} outputPath - Path where to save the exported video\n   */\n  const handleExport = async outputPath => {\n    setIsExporting(true);\n    setExportProgress(0);\n    setExportError(null);\n    try {\n      const result = await window.electronAPI.exportTimeline({\n        clips,\n        outputPath\n      });\n      if (result.success) {\n        showToast(`✓ Video exported successfully to ${outputPath.split('/').pop()}`, 'success', 5000);\n        setShowExportDialog(false);\n      } else {\n        const errorMessage = result.error.message || 'Export failed';\n        setExportError(errorMessage);\n        showToast(`Export failed: ${errorMessage}`, 'error', 5000);\n      }\n    } catch (err) {\n      console.error('[App] Export error:', err);\n      const errorMessage = err.message || 'Export failed';\n      setExportError(errorMessage);\n      showToast(`Export failed: ${errorMessage}`, 'error', 5000);\n    } finally {\n      setIsExporting(false);\n      setExportProgress(0);\n    }\n  };\n\n  /**\n   * Handle export dialog close\n   */\n  const handleCloseExportDialog = () => {\n    if (!isExporting) {\n      setShowExportDialog(false);\n      setExportError(null);\n      setExportProgress(0);\n    }\n  };\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"app-container\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n    className: \"help-button\",\n    onClick: () => setShowHelpDialog(true),\n    title: \"Help & Shortcuts\",\n    \"aria-label\": \"Open help dialog\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(lucide_react__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n    size: 20\n  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"main-content\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"aside\", {\n    className: \"media-panel\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_FileImporter__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n    onImportFiles: handleImportFiles,\n    isLoading: isImporting\n  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"main\", {\n    className: \"preview-panel\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_VideoPreview__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n    ref: videoPreviewRef,\n    clip: clips.find(c => c.id === selectedClipId) || null,\n    onPlaybackChange: setCurrentPlaybackTime,\n    onClipEnded: handleClipEnded\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_ClipEditor__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n    clip: clips.find(c => c.id === selectedClipId) || null,\n    onTrimChange: handleTrimChange\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"export-section\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n    className: \"export-button\",\n    onClick: () => setShowExportDialog(true),\n    disabled: clips.length === 0 || isExporting\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n    size: 20\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", null, \"Export Timeline (\", clips.length, \" clip\", clips.length !== 1 ? 's' : '', \")\"))))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_TimelineContainer__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n    clips: clips,\n    selectedClipId: selectedClipId,\n    onSelectClip: handleSelectClip,\n    onDeleteClip: handleDeleteClip,\n    playheadPosition: currentPlaybackTime,\n    onSeekToTime: handleSeekToTime,\n    onTrimChange: handleTrimChange\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_ExportDialog__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n    isOpen: showExportDialog,\n    onClose: handleCloseExportDialog,\n    clips: clips,\n    onExport: handleExport,\n    isExporting: isExporting,\n    exportProgress: exportProgress,\n    exportError: exportError\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_HelpDialog__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n    isOpen: showHelpDialog,\n    onClose: () => setShowHelpDialog(false)\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_Notifications__WEBPACK_IMPORTED_MODULE_12__[\"default\"], null));\n}\n\n/**\n * App Component with ToastProvider\n */\nfunction App() {\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_utils_toastContext__WEBPACK_IMPORTED_MODULE_3__.ToastProvider, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(AppContent, null));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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L0JrSCxZQUFZLEVBQUV0QyxnQkFBaUI7SUFDL0J1QyxZQUFZLEVBQUUvQyxnQkFBaUI7SUFDL0JnRCxnQkFBZ0IsRUFBRWxILG1CQUFvQjtJQUN0Q21ILFlBQVksRUFBRTVCLGdCQUFpQjtJQUMvQnVCLFlBQVksRUFBRW5DO0VBQWlCLENBQ2hDLENBQUMsZUFHRmpHLDBEQUFBLENBQUNjLGlFQUFZO0lBQ1g0SCxNQUFNLEVBQUU5RyxnQkFBaUI7SUFDekIrRyxPQUFPLEVBQUVsQix1QkFBd0I7SUFDakN2RyxLQUFLLEVBQUVBLEtBQU07SUFDYjBILFFBQVEsRUFBRXRCLFlBQWE7SUFDdkJ4RixXQUFXLEVBQUVBLFdBQVk7SUFDekJFLGNBQWMsRUFBRUEsY0FBZTtJQUMvQkUsV0FBVyxFQUFFQTtFQUFZLENBQzFCLENBQUMsZUFHRmxDLDBEQUFBLENBQUNlLCtEQUFVO0lBQ1QySCxNQUFNLEVBQUV0RyxjQUFlO0lBQ3ZCdUcsT0FBTyxFQUFFQSxDQUFBLEtBQU10RyxpQkFBaUIsQ0FBQyxLQUFLO0VBQUUsQ0FDekMsQ0FBQyxlQUVGckMsMERBQUEsQ0FBQ2dCLGtFQUFhLE1BQUUsQ0FDYixDQUFDO0FBRVY7O0FBRUE7QUFDQTtBQUNBO0FBQ2UsU0FBUzZILEdBQUdBLENBQUEsRUFBRztFQUM1QixvQkFDRTdJLDBEQUFBLENBQUNNLDhEQUFhLHFCQUNaTiwwREFBQSxDQUFDaUIsVUFBVSxNQUFFLENBQ0EsQ0FBQztBQUVwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaXBmb3JnZS8uL3NyYy9BcHAuanN4PzE1OTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IERvd25sb2FkLCBIZWxwQ2lyY2xlIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbmltcG9ydCB7IFRvYXN0UHJvdmlkZXIsIHVzZVRvYXN0IH0gZnJvbSAnLi91dGlscy90b2FzdENvbnRleHQnO1xuaW1wb3J0IHsgZ2VuZXJhdGVVdWlkIH0gZnJvbSAnLi91dGlscy91dWlkJztcbmltcG9ydCB7IEVSUk9SX01FU1NBR0VTIH0gZnJvbSAnLi91dGlscy9jb25zdGFudHMnO1xuaW1wb3J0IEZpbGVJbXBvcnRlciBmcm9tICcuL2NvbXBvbmVudHMvRmlsZUltcG9ydGVyJztcbmltcG9ydCBUaW1lbGluZUNvbnRhaW5lciBmcm9tICcuL2NvbXBvbmVudHMvVGltZWxpbmVDb250YWluZXInO1xuaW1wb3J0IFZpZGVvUHJldmlldyBmcm9tICcuL2NvbXBvbmVudHMvVmlkZW9QcmV2aWV3JztcbmltcG9ydCBDbGlwRWRpdG9yIGZyb20gJy4vY29tcG9uZW50cy9DbGlwRWRpdG9yJztcbmltcG9ydCBFeHBvcnREaWFsb2cgZnJvbSAnLi9jb21wb25lbnRzL0V4cG9ydERpYWxvZyc7XG5pbXBvcnQgSGVscERpYWxvZyBmcm9tICcuL2NvbXBvbmVudHMvSGVscERpYWxvZyc7XG5pbXBvcnQgTm90aWZpY2F0aW9ucyBmcm9tICcuL2NvbXBvbmVudHMvTm90aWZpY2F0aW9ucyc7XG5pbXBvcnQgJy4vc3R5bGVzL21haW4uY3NzJztcblxuLyoqXG4gKiBNYWluIEFwcCBDb21wb25lbnQgKHdyYXBwZWQgd2l0aCBUb2FzdFByb3ZpZGVyKVxuICovXG5mdW5jdGlvbiBBcHBDb250ZW50KCkge1xuICBjb25zdCBbY2xpcHMsIHNldENsaXBzXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW3NlbGVjdGVkQ2xpcElkLCBzZXRTZWxlY3RlZENsaXBJZF0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2N1cnJlbnRQbGF5YmFja1RpbWUsIHNldEN1cnJlbnRQbGF5YmFja1RpbWVdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IFtpc0ltcG9ydGluZywgc2V0SXNJbXBvcnRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbc2hvdWxkQXV0b1BsYXksIHNldFNob3VsZEF1dG9QbGF5XSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgXG4gIC8vIEV4cG9ydCBzdGF0ZVxuICBjb25zdCBbc2hvd0V4cG9ydERpYWxvZywgc2V0U2hvd0V4cG9ydERpYWxvZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtpc0V4cG9ydGluZywgc2V0SXNFeHBvcnRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZXhwb3J0UHJvZ3Jlc3MsIHNldEV4cG9ydFByb2dyZXNzXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbZXhwb3J0RXJyb3IsIHNldEV4cG9ydEVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xuICBcbiAgY29uc3QgW3Nob3dIZWxwRGlhbG9nLCBzZXRTaG93SGVscERpYWxvZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIFxuICBjb25zdCB2aWRlb1ByZXZpZXdSZWYgPSB1c2VSZWYobnVsbCk7XG4gIFxuICBjb25zdCB7IHNob3dUb2FzdCB9ID0gdXNlVG9hc3QoKTtcblxuICAvLyBMaXN0ZW4gZm9yIGV4cG9ydCBwcm9ncmVzcyB1cGRhdGVzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlRXhwb3J0UHJvZ3Jlc3MgPSAoZXZlbnQsIHByb2dyZXNzKSA9PiB7XG4gICAgICBzZXRFeHBvcnRQcm9ncmVzcyhwcm9ncmVzcyk7XG4gICAgfTtcblxuICAgIHdpbmRvdy5lbGVjdHJvbkFQSS5vbkV4cG9ydFByb2dyZXNzKGhhbmRsZUV4cG9ydFByb2dyZXNzKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyBDbGVhbnVwIGxpc3RlbmVyIHdoZW4gY29tcG9uZW50IHVubW91bnRzXG4gICAgICB3aW5kb3cuZWxlY3Ryb25BUEkucmVtb3ZlQWxsTGlzdGVuZXJzKCdleHBvcnQtcHJvZ3Jlc3MnKTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgLy8gS2V5Ym9hcmQgc2hvcnRjdXQgZm9yIGV4cG9ydCAoQ21kK0UpXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlS2V5RG93biA9IChlKSA9PiB7XG4gICAgICBpZiAoKGUubWV0YUtleSB8fCBlLmN0cmxLZXkpICYmIGUua2V5ID09PSAnZScpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoY2xpcHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNldFNob3dFeHBvcnREaWFsb2codHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hvd1RvYXN0KCdObyBjbGlwcyB0byBleHBvcnQnLCAnd2FybmluZycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bik7XG4gICAgcmV0dXJuICgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bik7XG4gIH0sIFtjbGlwcy5sZW5ndGgsIHNob3dUb2FzdF0pO1xuXG4gIC8qKlxuICAgKiBIYW5kbGUgZmlsZSBpbXBvcnRzXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGZpbGVQYXRocyAtIEFycmF5IG9mIGZpbGUgcGF0aHMgdG8gaW1wb3J0XG4gICAqL1xuICBjb25zdCBoYW5kbGVJbXBvcnRGaWxlcyA9IGFzeW5jIChmaWxlUGF0aHMpID0+IHtcbiAgICBzZXRJc0ltcG9ydGluZyh0cnVlKTtcbiAgICBsZXQgc3VjY2Vzc0NvdW50ID0gMDtcbiAgICBsZXQgZXJyb3JDb3VudCA9IDA7XG5cbiAgICBmb3IgKGNvbnN0IGZpbGVQYXRoIG9mIGZpbGVQYXRocykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gQ2FsbCBJUEMgdG8gZXh0cmFjdCBtZXRhZGF0YVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB3aW5kb3cuZWxlY3Ryb25BUEkucmVhZE1ldGFkYXRhKGZpbGVQYXRoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENoZWNrIGlmIG1ldGFkYXRhIGV4dHJhY3Rpb24gc3VjY2VlZGVkXG4gICAgICAgIGlmICghcmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdbQXBwXSBNZXRhZGF0YSBleHRyYWN0aW9uIGZhaWxlZDonLCByZXN1bHQuZXJyb3IpO1xuICAgICAgICAgIGVycm9yQ291bnQrKztcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCBmaWxlTmFtZSA9IGZpbGVQYXRoLnNwbGl0KCcvJykucG9wKCk7XG4gICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gcmVzdWx0LmVycm9yLm1lc3NhZ2UgfHwgRVJST1JfTUVTU0FHRVNbcmVzdWx0LmVycm9yLnR5cGVdIHx8IEVSUk9SX01FU1NBR0VTLlVOS05PV047XG4gICAgICAgICAgc2hvd1RvYXN0KGAke2ZpbGVOYW1lfTogJHtlcnJvck1lc3NhZ2V9YCwgJ2Vycm9yJywgNTAwMCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gcmVzdWx0LmRhdGE7XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhdGUgY2xpcCBvYmplY3RcbiAgICAgICAgY29uc3QgbmV3Q2xpcCA9IHtcbiAgICAgICAgICBpZDogZ2VuZXJhdGVVdWlkKCksXG4gICAgICAgICAgZmlsZU5hbWU6IGZpbGVQYXRoLnNwbGl0KCcvJykucG9wKCksXG4gICAgICAgICAgZmlsZVBhdGgsXG4gICAgICAgICAgc291cmNlOiAnaW1wb3J0JyxcbiAgICAgICAgICBkdXJhdGlvbjogbWV0YWRhdGEuZHVyYXRpb24sXG4gICAgICAgICAgd2lkdGg6IG1ldGFkYXRhLndpZHRoLFxuICAgICAgICAgIGhlaWdodDogbWV0YWRhdGEuaGVpZ2h0LFxuICAgICAgICAgIHRodW1ibmFpbDogbWV0YWRhdGEudGh1bWJuYWlsLFxuICAgICAgICAgIHRyaW1TdGFydDogMCxcbiAgICAgICAgICB0cmltRW5kOiBtZXRhZGF0YS5kdXJhdGlvbixcbiAgICAgICAgICBvcmRlcjogY2xpcHMubGVuZ3RoICsgc3VjY2Vzc0NvdW50LFxuICAgICAgICAgIHRyYWNrOiAnbWFpbidcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBBZGQgdG8gY2xpcHMgc3RhdGVcbiAgICAgICAgc2V0Q2xpcHMocHJldiA9PiBbLi4ucHJldiwgbmV3Q2xpcF0pO1xuICAgICAgICBzdWNjZXNzQ291bnQrKztcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbQXBwXSBVbmV4cGVjdGVkIGltcG9ydCBlcnJvcjonLCBlcnIpO1xuICAgICAgICBlcnJvckNvdW50Kys7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBmaWxlTmFtZSA9IGZpbGVQYXRoLnNwbGl0KCcvJykucG9wKCk7XG4gICAgICAgIHNob3dUb2FzdChgRmFpbGVkIHRvIGltcG9ydCAke2ZpbGVOYW1lfTogVW5leHBlY3RlZCBlcnJvcmAsICdlcnJvcicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNldElzSW1wb3J0aW5nKGZhbHNlKTtcblxuICAgIC8vIFNob3cgc3VjY2VzcyBtZXNzYWdlXG4gICAgaWYgKHN1Y2Nlc3NDb3VudCA+IDApIHtcbiAgICAgIHNob3dUb2FzdChcbiAgICAgICAgYFN1Y2Nlc3NmdWxseSBpbXBvcnRlZCAke3N1Y2Nlc3NDb3VudH0gY2xpcCR7c3VjY2Vzc0NvdW50ICE9PSAxID8gJ3MnIDogJyd9YCxcbiAgICAgICAgJ3N1Y2Nlc3MnXG4gICAgICApO1xuICAgIH1cbiAgICBcbiAgICBpZiAoZXJyb3JDb3VudCA+IDAgJiYgc3VjY2Vzc0NvdW50ID09PSAwKSB7XG4gICAgICBzaG93VG9hc3QoYEZhaWxlZCB0byBpbXBvcnQgJHtlcnJvckNvdW50fSBmaWxlJHtlcnJvckNvdW50ICE9PSAxID8gJ3MnIDogJyd9YCwgJ2Vycm9yJyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBIYW5kbGUgY2xpcCBkZWxldGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xpcElkIC0gSUQgb2YgY2xpcCB0byBkZWxldGVcbiAgICovXG4gIGNvbnN0IGhhbmRsZURlbGV0ZUNsaXAgPSAoY2xpcElkKSA9PiB7XG4gICAgY29uc3QgY2xpcCA9IGNsaXBzLmZpbmQoYyA9PiBjLmlkID09PSBjbGlwSWQpO1xuICAgIGlmICghY2xpcCkgcmV0dXJuO1xuXG4gICAgLy8gU2hvdyBjb25maXJtYXRpb24gZGlhbG9nXG4gICAgY29uc3QgY29uZmlybWVkID0gd2luZG93LmNvbmZpcm0oYERlbGV0ZSBcIiR7Y2xpcC5maWxlTmFtZX1cIj9gKTtcbiAgICBpZiAoIWNvbmZpcm1lZCkgcmV0dXJuO1xuXG4gICAgLy8gUmVtb3ZlIGNsaXAgZnJvbSBzdGF0ZVxuICAgIHNldENsaXBzKGNsaXBzLmZpbHRlcihjID0+IGMuaWQgIT09IGNsaXBJZCkpO1xuICAgIFxuICAgIC8vIENsZWFyIHNlbGVjdGlvbiBpZiBkZWxldGVkIGNsaXAgd2FzIHNlbGVjdGVkXG4gICAgaWYgKHNlbGVjdGVkQ2xpcElkID09PSBjbGlwSWQpIHtcbiAgICAgIHNldFNlbGVjdGVkQ2xpcElkKG51bGwpO1xuICAgIH1cblxuICAgIHNob3dUb2FzdCgnQ2xpcCBkZWxldGVkJywgJ3N1Y2Nlc3MnKTtcbiAgfTtcblxuICAvKipcbiAgICogSGFuZGxlIGNsaXAgc2VsZWN0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjbGlwSWQgLSBJRCBvZiBjbGlwIHRvIHNlbGVjdFxuICAgKi9cbiAgY29uc3QgaGFuZGxlU2VsZWN0Q2xpcCA9IChjbGlwSWQpID0+IHtcbiAgICBzZXRTZWxlY3RlZENsaXBJZChjbGlwSWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBIYW5kbGUgdHJpbSBjaGFuZ2VzIGZvciBhIGNsaXBcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNsaXBJZCAtIElEIG9mIGNsaXAgdG8gdHJpbVxuICAgKiBAcGFyYW0ge251bWJlcn0gdHJpbVN0YXJ0IC0gTmV3IHRyaW0gc3RhcnQgdGltZSBpbiBzZWNvbmRzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0cmltRW5kIC0gTmV3IHRyaW0gZW5kIHRpbWUgaW4gc2Vjb25kc1xuICAgKi9cbiAgY29uc3QgaGFuZGxlVHJpbUNoYW5nZSA9IChjbGlwSWQsIHRyaW1TdGFydCwgdHJpbUVuZCkgPT4ge1xuICAgIHNldENsaXBzKHByZXYgPT4gcHJldi5tYXAoY2xpcCA9PiBcbiAgICAgIGNsaXAuaWQgPT09IGNsaXBJZCBcbiAgICAgICAgPyB7IC4uLmNsaXAsIHRyaW1TdGFydCwgdHJpbUVuZCB9XG4gICAgICAgIDogY2xpcFxuICAgICkpO1xuICAgIHNob3dUb2FzdCgnQ2xpcCB0cmltbWVkJywgJ3N1Y2Nlc3MnKTtcbiAgfTtcblxuICAvKipcbiAgICogSGFuZGxlIGNsaXAgcmVvcmRlcmluZyB2aWEgZHJhZyBhbmQgZHJvcFxuICAgKiBAcGFyYW0ge251bWJlcn0gb2xkSW5kZXggLSBPcmlnaW5hbCBpbmRleCBvZiB0aGUgY2xpcFxuICAgKiBAcGFyYW0ge251bWJlcn0gbmV3SW5kZXggLSBOZXcgaW5kZXggZm9yIHRoZSBjbGlwXG4gICAqL1xuICBjb25zdCBoYW5kbGVSZW9yZGVyQ2xpcHMgPSAob2xkSW5kZXgsIG5ld0luZGV4KSA9PiB7XG4gICAgaWYgKG9sZEluZGV4ID09PSBuZXdJbmRleCkgcmV0dXJuO1xuXG4gICAgLy8gQ3JlYXRlIGEgY29weSBvZiB0aGUgY2xpcHMgYXJyYXlcbiAgICBjb25zdCBuZXdDbGlwcyA9IEFycmF5LmZyb20oY2xpcHMpO1xuICAgIFxuICAgIC8vIFJlbW92ZSB0aGUgY2xpcCBmcm9tIG9sZCBwb3NpdGlvblxuICAgIGNvbnN0IFttb3ZlZENsaXBdID0gbmV3Q2xpcHMuc3BsaWNlKG9sZEluZGV4LCAxKTtcbiAgICBcbiAgICAvLyBJbnNlcnQgYXQgbmV3IHBvc2l0aW9uXG4gICAgbmV3Q2xpcHMuc3BsaWNlKG5ld0luZGV4LCAwLCBtb3ZlZENsaXApO1xuICAgIFxuICAgIC8vIFVwZGF0ZSBvcmRlciBwcm9wZXJ0eSBmb3IgYWxsIGNsaXBzXG4gICAgbmV3Q2xpcHMuZm9yRWFjaCgoY2xpcCwgaW5kZXgpID0+IHtcbiAgICAgIGNsaXAub3JkZXIgPSBpbmRleDtcbiAgICB9KTtcbiAgICBcbiAgICBzZXRDbGlwcyhuZXdDbGlwcyk7XG4gICAgc2hvd1RvYXN0KCdDbGlwIHJlb3JkZXJlZCcsICdzdWNjZXNzJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBzZWVraW5nIHRvIGEgc3BlY2lmaWMgdGltZSBpbiB0aGUgdGltZWxpbmVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWUgLSBUaW1lIGluIHNlY29uZHMgdG8gc2VlayB0b1xuICAgKi9cbiAgY29uc3QgaGFuZGxlU2Vla1RvVGltZSA9ICh0aW1lKSA9PiB7XG4gICAgaWYgKHZpZGVvUHJldmlld1JlZi5jdXJyZW50KSB7XG4gICAgICB2aWRlb1ByZXZpZXdSZWYuY3VycmVudC5zZWVrVG8odGltZSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBIYW5kbGUgY2xpcCBlbmRpbmcgLSBtb3ZlIHRvIG5leHQgY2xpcCBmb3IgY29udGludW91cyBwbGF5YmFja1xuICAgKi9cbiAgY29uc3QgaGFuZGxlQ2xpcEVuZGVkID0gKCkgPT4ge1xuICAgIGlmIChjbGlwcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBjdXJyZW50SW5kZXggPSBjbGlwcy5maW5kSW5kZXgoY2xpcCA9PiBjbGlwLmlkID09PSBzZWxlY3RlZENsaXBJZCk7XG4gICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gLTEpIHJldHVybjtcbiAgICBcbiAgICAvLyBNb3ZlIHRvIG5leHQgY2xpcCBpZiBhdmFpbGFibGVcbiAgICBjb25zdCBuZXh0SW5kZXggPSBjdXJyZW50SW5kZXggKyAxO1xuICAgIGlmIChuZXh0SW5kZXggPCBjbGlwcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG5leHRDbGlwID0gY2xpcHNbbmV4dEluZGV4XTtcbiAgICAgIHNldFNlbGVjdGVkQ2xpcElkKG5leHRDbGlwLmlkKTtcbiAgICAgIHNldFNob3VsZEF1dG9QbGF5KHRydWUpOyAvLyBTaWduYWwgdG8gYXV0by1wbGF5IHRoZSBuZXh0IGNsaXBcbiAgICAgIHNldEN1cnJlbnRQbGF5YmFja1RpbWUobmV4dENsaXAudHJpbVN0YXJ0IHx8IDApOyAvLyBNb3ZlIHRpbWVsaW5lIHRvIHN0YXJ0IG9mIG5leHQgY2xpcFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBObyBtb3JlIGNsaXBzLCBzdG9wIHBsYXliYWNrXG4gICAgICBzZXRDdXJyZW50UGxheWJhY2tUaW1lKDApO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogSGFuZGxlIGV4cG9ydCByZXF1ZXN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRQYXRoIC0gUGF0aCB3aGVyZSB0byBzYXZlIHRoZSBleHBvcnRlZCB2aWRlb1xuICAgKi9cbiAgY29uc3QgaGFuZGxlRXhwb3J0ID0gYXN5bmMgKG91dHB1dFBhdGgpID0+IHtcbiAgICBzZXRJc0V4cG9ydGluZyh0cnVlKTtcbiAgICBzZXRFeHBvcnRQcm9ncmVzcygwKTtcbiAgICBzZXRFeHBvcnRFcnJvcihudWxsKTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB3aW5kb3cuZWxlY3Ryb25BUEkuZXhwb3J0VGltZWxpbmUoe1xuICAgICAgICBjbGlwcyxcbiAgICAgICAgb3V0cHV0UGF0aFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICBzaG93VG9hc3QoYOKckyBWaWRlbyBleHBvcnRlZCBzdWNjZXNzZnVsbHkgdG8gJHtvdXRwdXRQYXRoLnNwbGl0KCcvJykucG9wKCl9YCwgJ3N1Y2Nlc3MnLCA1MDAwKTtcbiAgICAgICAgc2V0U2hvd0V4cG9ydERpYWxvZyhmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSByZXN1bHQuZXJyb3IubWVzc2FnZSB8fCAnRXhwb3J0IGZhaWxlZCc7XG4gICAgICAgIHNldEV4cG9ydEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICAgIHNob3dUb2FzdChgRXhwb3J0IGZhaWxlZDogJHtlcnJvck1lc3NhZ2V9YCwgJ2Vycm9yJywgNTAwMCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbQXBwXSBFeHBvcnQgZXJyb3I6JywgZXJyKTtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVyci5tZXNzYWdlIHx8ICdFeHBvcnQgZmFpbGVkJztcbiAgICAgIHNldEV4cG9ydEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICBzaG93VG9hc3QoYEV4cG9ydCBmYWlsZWQ6ICR7ZXJyb3JNZXNzYWdlfWAsICdlcnJvcicsIDUwMDApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc0V4cG9ydGluZyhmYWxzZSk7XG4gICAgICBzZXRFeHBvcnRQcm9ncmVzcygwKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBleHBvcnQgZGlhbG9nIGNsb3NlXG4gICAqL1xuICBjb25zdCBoYW5kbGVDbG9zZUV4cG9ydERpYWxvZyA9ICgpID0+IHtcbiAgICBpZiAoIWlzRXhwb3J0aW5nKSB7XG4gICAgICBzZXRTaG93RXhwb3J0RGlhbG9nKGZhbHNlKTtcbiAgICAgIHNldEV4cG9ydEVycm9yKG51bGwpO1xuICAgICAgc2V0RXhwb3J0UHJvZ3Jlc3MoMCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJhcHAtY29udGFpbmVyXCI+XG4gICAgICB7LyogSGVscCBCdXR0b24gKFRvcCBSaWdodCkgKi99XG4gICAgICA8YnV0dG9uIFxuICAgICAgICBjbGFzc05hbWU9XCJoZWxwLWJ1dHRvblwiXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dIZWxwRGlhbG9nKHRydWUpfVxuICAgICAgICB0aXRsZT1cIkhlbHAgJiBTaG9ydGN1dHNcIlxuICAgICAgICBhcmlhLWxhYmVsPVwiT3BlbiBoZWxwIGRpYWxvZ1wiXG4gICAgICA+XG4gICAgICAgIDxIZWxwQ2lyY2xlIHNpemU9ezIwfSAvPlxuICAgICAgPC9idXR0b24+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpbi1jb250ZW50XCI+XG4gICAgICAgIDxhc2lkZSBjbGFzc05hbWU9XCJtZWRpYS1wYW5lbFwiPlxuICAgICAgICAgIDxGaWxlSW1wb3J0ZXIgXG4gICAgICAgICAgICBvbkltcG9ydEZpbGVzPXtoYW5kbGVJbXBvcnRGaWxlc30gXG4gICAgICAgICAgICBpc0xvYWRpbmc9e2lzSW1wb3J0aW5nfSBcbiAgICAgICAgICAvPlxuICAgICAgICA8L2FzaWRlPlxuXG4gICAgICAgIDxtYWluIGNsYXNzTmFtZT1cInByZXZpZXctcGFuZWxcIj5cbiAgICAgICAgICA8VmlkZW9QcmV2aWV3XG4gICAgICAgICAgICByZWY9e3ZpZGVvUHJldmlld1JlZn1cbiAgICAgICAgICAgIGNsaXA9e2NsaXBzLmZpbmQoYyA9PiBjLmlkID09PSBzZWxlY3RlZENsaXBJZCkgfHwgbnVsbH1cbiAgICAgICAgICAgIG9uUGxheWJhY2tDaGFuZ2U9e3NldEN1cnJlbnRQbGF5YmFja1RpbWV9XG4gICAgICAgICAgICBvbkNsaXBFbmRlZD17aGFuZGxlQ2xpcEVuZGVkfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPENsaXBFZGl0b3JcbiAgICAgICAgICAgIGNsaXA9e2NsaXBzLmZpbmQoYyA9PiBjLmlkID09PSBzZWxlY3RlZENsaXBJZCkgfHwgbnVsbH1cbiAgICAgICAgICAgIG9uVHJpbUNoYW5nZT17aGFuZGxlVHJpbUNoYW5nZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIFxuICAgICAgICAgIHsvKiBFeHBvcnQgQnV0dG9uICovfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZXhwb3J0LXNlY3Rpb25cIj5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZXhwb3J0LWJ1dHRvblwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dFeHBvcnREaWFsb2codHJ1ZSl9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtjbGlwcy5sZW5ndGggPT09IDAgfHwgaXNFeHBvcnRpbmd9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxEb3dubG9hZCBzaXplPXsyMH0gLz5cbiAgICAgICAgICAgICAgPHNwYW4+RXhwb3J0IFRpbWVsaW5lICh7Y2xpcHMubGVuZ3RofSBjbGlwe2NsaXBzLmxlbmd0aCAhPT0gMSA/ICdzJyA6ICcnfSk8L3NwYW4+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9tYWluPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIHsvKiBIb3Jpem9udGFsIFRpbWVsaW5lIGF0IEJvdHRvbSAqL31cbiAgICAgIDxUaW1lbGluZUNvbnRhaW5lclxuICAgICAgICBjbGlwcz17Y2xpcHN9XG4gICAgICAgIHNlbGVjdGVkQ2xpcElkPXtzZWxlY3RlZENsaXBJZH1cbiAgICAgICAgb25TZWxlY3RDbGlwPXtoYW5kbGVTZWxlY3RDbGlwfVxuICAgICAgICBvbkRlbGV0ZUNsaXA9e2hhbmRsZURlbGV0ZUNsaXB9XG4gICAgICAgIHBsYXloZWFkUG9zaXRpb249e2N1cnJlbnRQbGF5YmFja1RpbWV9XG4gICAgICAgIG9uU2Vla1RvVGltZT17aGFuZGxlU2Vla1RvVGltZX1cbiAgICAgICAgb25UcmltQ2hhbmdlPXtoYW5kbGVUcmltQ2hhbmdlfVxuICAgICAgLz5cblxuICAgICAgey8qIEV4cG9ydCBEaWFsb2cgKi99XG4gICAgICA8RXhwb3J0RGlhbG9nXG4gICAgICAgIGlzT3Blbj17c2hvd0V4cG9ydERpYWxvZ31cbiAgICAgICAgb25DbG9zZT17aGFuZGxlQ2xvc2VFeHBvcnREaWFsb2d9XG4gICAgICAgIGNsaXBzPXtjbGlwc31cbiAgICAgICAgb25FeHBvcnQ9e2hhbmRsZUV4cG9ydH1cbiAgICAgICAgaXNFeHBvcnRpbmc9e2lzRXhwb3J0aW5nfVxuICAgICAgICBleHBvcnRQcm9ncmVzcz17ZXhwb3J0UHJvZ3Jlc3N9XG4gICAgICAgIGV4cG9ydEVycm9yPXtleHBvcnRFcnJvcn1cbiAgICAgIC8+XG5cbiAgICAgIHsvKiBIZWxwIERpYWxvZyAqL31cbiAgICAgIDxIZWxwRGlhbG9nXG4gICAgICAgIGlzT3Blbj17c2hvd0hlbHBEaWFsb2d9XG4gICAgICAgIG9uQ2xvc2U9eygpID0+IHNldFNob3dIZWxwRGlhbG9nKGZhbHNlKX1cbiAgICAgIC8+XG5cbiAgICAgIDxOb3RpZmljYXRpb25zIC8+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbi8qKlxuICogQXBwIENvbXBvbmVudCB3aXRoIFRvYXN0UHJvdmlkZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXBwKCkge1xuICByZXR1cm4gKFxuICAgIDxUb2FzdFByb3ZpZGVyPlxuICAgICAgPEFwcENvbnRlbnQgLz5cbiAgICA8L1RvYXN0UHJvdmlkZXI+XG4gICk7XG59XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZVJlZiIsIkRvd25sb2FkIiwiSGVscENpcmNsZSIsIlRvYXN0UHJvdmlkZXIiLCJ1c2VUb2FzdCIsImdlbmVyYXRlVXVpZCIsIkVSUk9SX01FU1NBR0VTIiwiRmlsZUltcG9ydGVyIiwiVGltZWxpbmVDb250YWluZXIiLCJWaWRlb1ByZXZpZXciLCJDbGlwRWRpdG9yIiwiRXhwb3J0RGlhbG9nIiwiSGVscERpYWxvZyIsIk5vdGlmaWNhdGlvbnMiLCJBcHBDb250ZW50IiwiY2xpcHMiLCJzZXRDbGlwcyIsInNlbGVjdGVkQ2xpcElkIiwic2V0U2VsZWN0ZWRDbGlwSWQiLCJjdXJyZW50UGxheWJhY2tUaW1lIiwic2V0Q3VycmVudFBsYXliYWNrVGltZSIsImlzSW1wb3J0aW5nIiwic2V0SXNJbXBvcnRpbmciLCJzaG91bGRBdXRvUGxheSIsInNldFNob3VsZEF1dG9QbGF5Iiwic2hvd0V4cG9ydERpYWxvZyIsInNldFNob3dFeHBvcnREaWFsb2ciLCJpc0V4cG9ydGluZyIsInNldElzRXhwb3J0aW5nIiwiZXhwb3J0UHJvZ3Jlc3MiLCJzZXRFeHBvcnRQcm9ncmVzcyIsImV4cG9ydEVycm9yIiwic2V0RXhwb3J0RXJyb3IiLCJzaG93SGVscERpYWxvZyIsInNldFNob3dIZWxwRGlhbG9nIiwidmlkZW9QcmV2aWV3UmVmIiwic2hvd1RvYXN0IiwiaGFuZGxlRXhwb3J0UHJvZ3Jlc3MiLCJldmVudCIsInByb2dyZXNzIiwid2luZG93IiwiZWxlY3Ryb25BUEkiLCJvbkV4cG9ydFByb2dyZXNzIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiaGFuZGxlS2V5RG93biIsImUiLCJtZXRhS2V5IiwiY3RybEtleSIsImtleSIsInByZXZlbnREZWZhdWx0IiwibGVuZ3RoIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYW5kbGVJbXBvcnRGaWxlcyIsImZpbGVQYXRocyIsInN1Y2Nlc3NDb3VudCIsImVycm9yQ291bnQiLCJmaWxlUGF0aCIsInJlc3VsdCIsInJlYWRNZXRhZGF0YSIsInN1Y2Nlc3MiLCJjb25zb2xlIiwiZXJyb3IiLCJmaWxlTmFtZSIsInNwbGl0IiwicG9wIiwiZXJyb3JNZXNzYWdlIiwibWVzc2FnZSIsInR5cGUiLCJVTktOT1dOIiwibWV0YWRhdGEiLCJkYXRhIiwibmV3Q2xpcCIsImlkIiwic291cmNlIiwiZHVyYXRpb24iLCJ3aWR0aCIsImhlaWdodCIsInRodW1ibmFpbCIsInRyaW1TdGFydCIsInRyaW1FbmQiLCJvcmRlciIsInRyYWNrIiwicHJldiIsImVyciIsImhhbmRsZURlbGV0ZUNsaXAiLCJjbGlwSWQiLCJjbGlwIiwiZmluZCIsImMiLCJjb25maXJtZWQiLCJjb25maXJtIiwiZmlsdGVyIiwiaGFuZGxlU2VsZWN0Q2xpcCIsImhhbmRsZVRyaW1DaGFuZ2UiLCJtYXAiLCJoYW5kbGVSZW9yZGVyQ2xpcHMiLCJvbGRJbmRleCIsIm5ld0luZGV4IiwibmV3Q2xpcHMiLCJBcnJheSIsImZyb20iLCJtb3ZlZENsaXAiLCJzcGxpY2UiLCJmb3JFYWNoIiwiaW5kZXgiLCJoYW5kbGVTZWVrVG9UaW1lIiwidGltZSIsImN1cnJlbnQiLCJzZWVrVG8iLCJoYW5kbGVDbGlwRW5kZWQiLCJjdXJyZW50SW5kZXgiLCJmaW5kSW5kZXgiLCJuZXh0SW5kZXgiLCJuZXh0Q2xpcCIsImhhbmRsZUV4cG9ydCIsIm91dHB1dFBhdGgiLCJleHBvcnRUaW1lbGluZSIsImhhbmRsZUNsb3NlRXhwb3J0RGlhbG9nIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsIm9uQ2xpY2siLCJ0aXRsZSIsInNpemUiLCJvbkltcG9ydEZpbGVzIiwiaXNMb2FkaW5nIiwicmVmIiwib25QbGF5YmFja0NoYW5nZSIsIm9uQ2xpcEVuZGVkIiwib25UcmltQ2hhbmdlIiwiZGlzYWJsZWQiLCJvblNlbGVjdENsaXAiLCJvbkRlbGV0ZUNsaXAiLCJwbGF5aGVhZFBvc2l0aW9uIiwib25TZWVrVG9UaW1lIiwiaXNPcGVuIiwib25DbG9zZSIsIm9uRXhwb3J0IiwiQXBwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/App.jsx\n\n}");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("7be84b28258b0bac21ef")
/******/ })();
/******/ 
/******/ }
);