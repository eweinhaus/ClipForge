"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateclipforge"]("main_window",{

/***/ "./src/components/VideoPreview.jsx":
/*!*****************************************!*\
  !*** ./src/components/VideoPreview.jsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/triangle-alert.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/pause.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/play.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/video.js\");\n/* harmony import */ var _utils_formatters__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/formatters */ \"./src/utils/formatters.js\");\n/* harmony import */ var _VideoPreview_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./VideoPreview.css */ \"./src/components/VideoPreview.css\");\n\n\n\n\n\n/**\n * VideoPreview Component\n * Displays video player with controls for the selected clip\n */\nconst VideoPreview = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({\n  clip,\n  onPlaybackChange,\n  onClipEnded,\n  shouldAutoPlay,\n  onAutoPlayStarted\n}, ref) => {\n  const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const [isPlaying, setIsPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [currentTime, setCurrentTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  const [duration, setDuration] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [hasError, setHasError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n\n  // Expose seek method to parent component\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => ({\n    seekTo: time => {\n      if (videoRef.current && clip) {\n        const trimStart = clip.trimStart || 0;\n        const trimEnd = clip.trimEnd || clip.duration || 0;\n\n        // Clamp seek time within trim range\n        const clampedTime = Math.max(trimStart, Math.min(trimEnd, time));\n        videoRef.current.currentTime = clampedTime;\n        setCurrentTime(clampedTime);\n      }\n    }\n  }));\n\n  // Reset state when clip changes\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!clip) {\n      setIsPlaying(false);\n      setCurrentTime(0);\n      setDuration(0);\n      setHasError(false);\n      return;\n    }\n\n    // Reset playback state for new clip\n    setIsPlaying(false);\n    setCurrentTime(clip.trimStart || 0);\n    setDuration(clip.duration || 0);\n    setHasError(false);\n    setIsLoading(true);\n\n    // Load new video source\n    if (videoRef.current) {\n      const video = videoRef.current;\n\n      // Prefer custom protocol to avoid file:// restrictions\n      const rawPath = clip.filePath.replace(/^file:\\/\\//, '');\n      const videoSrc = `local-media://${rawPath}`;\n      video.src = videoSrc;\n      video.load();\n      video.onloadedmetadata = () => {\n        handleLoadedMetadata();\n      };\n      video.oncanplay = () => {\n        // Only seek to trim start if video is ready and we have a trim start > 0\n        if (clip.trimStart > 0 && videoRef.current) {\n          const currentTime = videoRef.current.currentTime;\n          // Only seek if we're not already at the trim start\n          if (Math.abs(currentTime - clip.trimStart) > 0.1) {\n            videoRef.current.currentTime = clip.trimStart;\n            setCurrentTime(clip.trimStart);\n          }\n        }\n      };\n      video.onerror = e => {\n        const mediaError = video.error || {};\n        console.error('[Video] error event', {\n          src: videoSrc,\n          code: mediaError.code,\n          message: mediaError.message,\n          networkState: video.networkState,\n          readyState: video.readyState\n        });\n        console.error('Video element error:', e);\n      };\n      video.onstalled = () => console.warn('[Video] stalled', {\n        src: videoSrc\n      });\n      video.onsuspend = () => console.warn('[Video] suspend', {\n        src: videoSrc\n      });\n      video.onwaiting = () => console.warn('[Video] waiting', {\n        src: videoSrc\n      });\n    }\n  }, [clip]);\n\n  // Handle video events\n  const handleLoadedMetadata = () => {\n    if (videoRef.current) {\n      setDuration(videoRef.current.duration || 0);\n      setIsLoading(false);\n    }\n  };\n  const handleTimeUpdate = () => {\n    if (videoRef.current && clip) {\n      const video = videoRef.current;\n      let newTime = video.currentTime;\n\n      // Clamp time within trim range\n      const trimStart = clip.trimStart || 0;\n      const trimEnd = clip.trimEnd || clip.duration || 0;\n\n      // Only clamp if we're actually outside the trim range\n      if (trimStart > 0 && newTime < trimStart) {\n        newTime = trimStart;\n        video.currentTime = trimStart;\n      } else if (trimEnd < clip.duration && newTime > trimEnd) {\n        newTime = trimEnd;\n        video.currentTime = trimEnd;\n        video.pause(); // Pause when reaching trim end\n        setIsPlaying(false);\n\n        // Trigger continuous playback to next clip\n        onClipEnded?.();\n      }\n      setCurrentTime(newTime);\n      onPlaybackChange?.(newTime);\n    }\n  };\n  const handlePlay = () => {\n    setIsPlaying(true);\n  };\n  const handlePause = () => {\n    setIsPlaying(false);\n  };\n  const handleEnded = () => {\n    setIsPlaying(false);\n\n    // If we're at the natural end of the video, trigger continuous playback\n    if (clip && videoRef.current) {\n      const trimEnd = clip.trimEnd || clip.duration || 0;\n      const currentTime = videoRef.current.currentTime;\n\n      // If we're at or past the trim end, trigger next clip\n      if (currentTime >= trimEnd) {\n        onClipEnded?.();\n        return;\n      }\n    }\n\n    // Otherwise, reset to beginning\n    setCurrentTime(0);\n    if (videoRef.current) {\n      videoRef.current.currentTime = 0;\n    }\n  };\n  const handleError = () => {\n    setHasError(true);\n    setIsLoading(false);\n    setIsPlaying(false);\n  };\n\n  // Playback controls\n  const togglePlayPause = () => {\n    if (!videoRef.current || hasError) {\n      return;\n    }\n    const video = videoRef.current;\n    const trimStart = clip?.trimStart || 0;\n    if (isPlaying) {\n      video.pause();\n    } else {\n      // Ensure we're at trim start if needed\n      if (trimStart > 0 && video.currentTime < trimStart) {\n        video.currentTime = trimStart;\n      }\n      video.play();\n    }\n  };\n  const handleScrub = e => {\n    if (!videoRef.current || hasError || !clip) return;\n    const newTime = parseFloat(e.target.value);\n    const trimStart = clip.trimStart || 0;\n    const trimEnd = clip.trimEnd || clip.duration || 0;\n\n    // Clamp scrubber value within trim range\n    const clampedTime = Math.max(trimStart, Math.min(trimEnd, newTime));\n    videoRef.current.currentTime = clampedTime;\n    setCurrentTime(clampedTime);\n  };\n\n  // Keyboard shortcut handler\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && clip && !hasError) {\n        e.preventDefault();\n        togglePlayPause();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [clip, hasError, isPlaying]);\n\n  // No clip selected state\n  if (!clip) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n      className: \"video-preview\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n      className: \"preview-placeholder\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n      className: \"empty-icon\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n      size: 80,\n      strokeWidth: 1.5\n    })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"h2\", null, \"No clip selected\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", {\n      className: \"text-muted\"\n    }, \"Select a clip from the timeline to preview\")));\n  }\n\n  // Error state\n  if (hasError) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n      className: \"video-preview\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n      className: \"preview-placeholder\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n      className: \"empty-icon error\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(lucide_react__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n      size: 80,\n      strokeWidth: 1.5\n    })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"h2\", null, \"Video Error\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", {\n      className: \"text-muted\"\n    }, \"Unable to load video file\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", {\n      className: \"text-muted\"\n    }, clip.fileName)));\n  }\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"video-preview\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"video-container\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"video\", {\n    ref: videoRef,\n    className: \"video-element\",\n    onLoadedMetadata: handleLoadedMetadata,\n    onTimeUpdate: handleTimeUpdate,\n    onPlay: handlePlay,\n    onPause: handlePause,\n    onEnded: handleEnded,\n    onError: handleError,\n    preload: \"metadata\"\n  }), isLoading && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"video-loading\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"loading-spinner\"\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", null, \"Loading video...\"))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"video-controls\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n    className: \"control-btn play-btn\",\n    onClick: togglePlayPause,\n    disabled: isLoading,\n    title: isPlaying ? 'Pause (Space)' : 'Play (Space)'\n  }, isPlaying ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n    size: 18\n  }) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n    size: 18\n  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"time-display\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", null, (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_5__.formatDuration)(currentTime)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n    className: \"time-separator\"\n  }, \"/\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", null, (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_5__.formatDuration)(duration))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"scrubber-container\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\n    type: \"range\",\n    className: \"scrubber\",\n    min: clip?.trimStart || 0,\n    max: clip?.trimEnd || duration || 0,\n    value: currentTime,\n    onChange: handleScrub,\n    step: \"0.1\",\n    disabled: isLoading || duration === 0\n  }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"video-metadata\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"metadata-item\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n    className: \"metadata-label\"\n  }, \"File:\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n    className: \"metadata-value\",\n    title: clip.fileName\n  }, clip.fileName)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"metadata-item\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n    className: \"metadata-label\"\n  }, \"Res:\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n    className: \"metadata-value\"\n  }, (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_5__.formatResolution)(clip.width, clip.height))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"metadata-item\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n    className: \"metadata-label\"\n  }, \"Dur:\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n    className: \"metadata-value\"\n  }, (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_5__.formatDuration)((clip.trimEnd || clip.duration) - (clip.trimStart || 0))))));\n});\nVideoPreview.displayName = 'VideoPreview';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VideoPreview);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9WaWRlb1ByZXZpZXcuanN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUE0RjtBQUMzQjtBQUNNO0FBQzNDOztBQUU1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1ZLFlBQVksZ0JBQUdQLGlEQUFVLENBQUMsQ0FBQztFQUFFUSxJQUFJO0VBQUVDLGdCQUFnQjtFQUFFQyxXQUFXO0VBQUVDLGNBQWM7RUFBRUM7QUFBa0IsQ0FBQyxFQUFFQyxHQUFHLEtBQUs7RUFDbkgsTUFBTUMsUUFBUSxHQUFHbEIsNkNBQU0sQ0FBQyxJQUFJLENBQUM7RUFDN0IsTUFBTSxDQUFDbUIsU0FBUyxFQUFFQyxZQUFZLENBQUMsR0FBR25CLCtDQUFRLENBQUMsS0FBSyxDQUFDO0VBQ2pELE1BQU0sQ0FBQ29CLFdBQVcsRUFBRUMsY0FBYyxDQUFDLEdBQUdyQiwrQ0FBUSxDQUFDLENBQUMsQ0FBQztFQUNqRCxNQUFNLENBQUNzQixRQUFRLEVBQUVDLFdBQVcsQ0FBQyxHQUFHdkIsK0NBQVEsQ0FBQyxDQUFDLENBQUM7RUFDM0MsTUFBTSxDQUFDd0IsU0FBUyxFQUFFQyxZQUFZLENBQUMsR0FBR3pCLCtDQUFRLENBQUMsS0FBSyxDQUFDO0VBQ2pELE1BQU0sQ0FBQzBCLFFBQVEsRUFBRUMsV0FBVyxDQUFDLEdBQUczQiwrQ0FBUSxDQUFDLEtBQUssQ0FBQzs7RUFFL0M7RUFDQUUsMERBQW1CLENBQUNjLEdBQUcsRUFBRSxPQUFPO0lBQzlCWSxNQUFNLEVBQUdDLElBQUksSUFBSztNQUNoQixJQUFJWixRQUFRLENBQUNhLE9BQU8sSUFBSW5CLElBQUksRUFBRTtRQUM1QixNQUFNb0IsU0FBUyxHQUFHcEIsSUFBSSxDQUFDb0IsU0FBUyxJQUFJLENBQUM7UUFDckMsTUFBTUMsT0FBTyxHQUFHckIsSUFBSSxDQUFDcUIsT0FBTyxJQUFJckIsSUFBSSxDQUFDVyxRQUFRLElBQUksQ0FBQzs7UUFFbEQ7UUFDQSxNQUFNVyxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDSixTQUFTLEVBQUVHLElBQUksQ0FBQ0UsR0FBRyxDQUFDSixPQUFPLEVBQUVILElBQUksQ0FBQyxDQUFDO1FBRWhFWixRQUFRLENBQUNhLE9BQU8sQ0FBQ1YsV0FBVyxHQUFHYSxXQUFXO1FBQzFDWixjQUFjLENBQUNZLFdBQVcsQ0FBQztNQUM3QjtJQUNGO0VBQ0YsQ0FBQyxDQUFDLENBQUM7O0VBRUg7RUFDQWhDLGdEQUFTLENBQUMsTUFBTTtJQUNkLElBQUksQ0FBQ1UsSUFBSSxFQUFFO01BQ1RRLFlBQVksQ0FBQyxLQUFLLENBQUM7TUFDbkJFLGNBQWMsQ0FBQyxDQUFDLENBQUM7TUFDakJFLFdBQVcsQ0FBQyxDQUFDLENBQUM7TUFDZEksV0FBVyxDQUFDLEtBQUssQ0FBQztNQUNsQjtJQUNGOztJQUVBO0lBQ0FSLFlBQVksQ0FBQyxLQUFLLENBQUM7SUFDbkJFLGNBQWMsQ0FBQ1YsSUFBSSxDQUFDb0IsU0FBUyxJQUFJLENBQUMsQ0FBQztJQUNuQ1IsV0FBVyxDQUFDWixJQUFJLENBQUNXLFFBQVEsSUFBSSxDQUFDLENBQUM7SUFDL0JLLFdBQVcsQ0FBQyxLQUFLLENBQUM7SUFDbEJGLFlBQVksQ0FBQyxJQUFJLENBQUM7O0lBRWxCO0lBQ0EsSUFBSVIsUUFBUSxDQUFDYSxPQUFPLEVBQUU7TUFDcEIsTUFBTU8sS0FBSyxHQUFHcEIsUUFBUSxDQUFDYSxPQUFPOztNQUU5QjtNQUNBLE1BQU1RLE9BQU8sR0FBRzNCLElBQUksQ0FBQzRCLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUM7TUFDdkQsTUFBTUMsUUFBUSxHQUFHLGlCQUFpQkgsT0FBTyxFQUFFO01BRTNDRCxLQUFLLENBQUNLLEdBQUcsR0FBR0QsUUFBUTtNQUNwQkosS0FBSyxDQUFDTSxJQUFJLENBQUMsQ0FBQztNQUVaTixLQUFLLENBQUNPLGdCQUFnQixHQUFHLE1BQU07UUFDN0JDLG9CQUFvQixDQUFDLENBQUM7TUFDeEIsQ0FBQztNQUVEUixLQUFLLENBQUNTLFNBQVMsR0FBRyxNQUFNO1FBQ3RCO1FBQ0EsSUFBSW5DLElBQUksQ0FBQ29CLFNBQVMsR0FBRyxDQUFDLElBQUlkLFFBQVEsQ0FBQ2EsT0FBTyxFQUFFO1VBQzFDLE1BQU1WLFdBQVcsR0FBR0gsUUFBUSxDQUFDYSxPQUFPLENBQUNWLFdBQVc7VUFDaEQ7VUFDQSxJQUFJYyxJQUFJLENBQUNhLEdBQUcsQ0FBQzNCLFdBQVcsR0FBR1QsSUFBSSxDQUFDb0IsU0FBUyxDQUFDLEdBQUcsR0FBRyxFQUFFO1lBQ2hEZCxRQUFRLENBQUNhLE9BQU8sQ0FBQ1YsV0FBVyxHQUFHVCxJQUFJLENBQUNvQixTQUFTO1lBQzdDVixjQUFjLENBQUNWLElBQUksQ0FBQ29CLFNBQVMsQ0FBQztVQUNoQztRQUNGO01BQ0YsQ0FBQztNQUVETSxLQUFLLENBQUNXLE9BQU8sR0FBSUMsQ0FBQyxJQUFLO1FBQ3JCLE1BQU1DLFVBQVUsR0FBR2IsS0FBSyxDQUFDYyxLQUFLLElBQUksQ0FBQyxDQUFDO1FBQ3BDQyxPQUFPLENBQUNELEtBQUssQ0FBQyxxQkFBcUIsRUFBRTtVQUNuQ1QsR0FBRyxFQUFFRCxRQUFRO1VBQ2JZLElBQUksRUFBRUgsVUFBVSxDQUFDRyxJQUFJO1VBQ3JCQyxPQUFPLEVBQUVKLFVBQVUsQ0FBQ0ksT0FBTztVQUMzQkMsWUFBWSxFQUFFbEIsS0FBSyxDQUFDa0IsWUFBWTtVQUNoQ0MsVUFBVSxFQUFFbkIsS0FBSyxDQUFDbUI7UUFDcEIsQ0FBQyxDQUFDO1FBQ0ZKLE9BQU8sQ0FBQ0QsS0FBSyxDQUFDLHNCQUFzQixFQUFFRixDQUFDLENBQUM7TUFDMUMsQ0FBQztNQUVEWixLQUFLLENBQUNvQixTQUFTLEdBQUcsTUFBTUwsT0FBTyxDQUFDTSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7UUFBRWhCLEdBQUcsRUFBRUQ7TUFBUyxDQUFDLENBQUM7TUFDMUVKLEtBQUssQ0FBQ3NCLFNBQVMsR0FBRyxNQUFNUCxPQUFPLENBQUNNLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtRQUFFaEIsR0FBRyxFQUFFRDtNQUFTLENBQUMsQ0FBQztNQUMxRUosS0FBSyxDQUFDdUIsU0FBUyxHQUFHLE1BQU1SLE9BQU8sQ0FBQ00sSUFBSSxDQUFDLGlCQUFpQixFQUFFO1FBQUVoQixHQUFHLEVBQUVEO01BQVMsQ0FBQyxDQUFDO0lBQzVFO0VBQ0YsQ0FBQyxFQUFFLENBQUM5QixJQUFJLENBQUMsQ0FBQzs7RUFFVjtFQUNBLE1BQU1rQyxvQkFBb0IsR0FBR0EsQ0FBQSxLQUFNO0lBQ2pDLElBQUk1QixRQUFRLENBQUNhLE9BQU8sRUFBRTtNQUNwQlAsV0FBVyxDQUFDTixRQUFRLENBQUNhLE9BQU8sQ0FBQ1IsUUFBUSxJQUFJLENBQUMsQ0FBQztNQUMzQ0csWUFBWSxDQUFDLEtBQUssQ0FBQztJQUNyQjtFQUNGLENBQUM7RUFFRCxNQUFNb0MsZ0JBQWdCLEdBQUdBLENBQUEsS0FBTTtJQUM3QixJQUFJNUMsUUFBUSxDQUFDYSxPQUFPLElBQUluQixJQUFJLEVBQUU7TUFDNUIsTUFBTTBCLEtBQUssR0FBR3BCLFFBQVEsQ0FBQ2EsT0FBTztNQUM5QixJQUFJZ0MsT0FBTyxHQUFHekIsS0FBSyxDQUFDakIsV0FBVzs7TUFFL0I7TUFDQSxNQUFNVyxTQUFTLEdBQUdwQixJQUFJLENBQUNvQixTQUFTLElBQUksQ0FBQztNQUNyQyxNQUFNQyxPQUFPLEdBQUdyQixJQUFJLENBQUNxQixPQUFPLElBQUlyQixJQUFJLENBQUNXLFFBQVEsSUFBSSxDQUFDOztNQUVsRDtNQUNBLElBQUlTLFNBQVMsR0FBRyxDQUFDLElBQUkrQixPQUFPLEdBQUcvQixTQUFTLEVBQUU7UUFDeEMrQixPQUFPLEdBQUcvQixTQUFTO1FBQ25CTSxLQUFLLENBQUNqQixXQUFXLEdBQUdXLFNBQVM7TUFDL0IsQ0FBQyxNQUFNLElBQUlDLE9BQU8sR0FBR3JCLElBQUksQ0FBQ1csUUFBUSxJQUFJd0MsT0FBTyxHQUFHOUIsT0FBTyxFQUFFO1FBQ3ZEOEIsT0FBTyxHQUFHOUIsT0FBTztRQUNqQkssS0FBSyxDQUFDakIsV0FBVyxHQUFHWSxPQUFPO1FBQzNCSyxLQUFLLENBQUMwQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZjVDLFlBQVksQ0FBQyxLQUFLLENBQUM7O1FBRW5CO1FBQ0FOLFdBQVcsR0FBRyxDQUFDO01BQ2pCO01BRUFRLGNBQWMsQ0FBQ3lDLE9BQU8sQ0FBQztNQUN2QmxELGdCQUFnQixHQUFHa0QsT0FBTyxDQUFDO0lBQzdCO0VBQ0YsQ0FBQztFQUVELE1BQU1FLFVBQVUsR0FBR0EsQ0FBQSxLQUFNO0lBQ3ZCN0MsWUFBWSxDQUFDLElBQUksQ0FBQztFQUNwQixDQUFDO0VBRUQsTUFBTThDLFdBQVcsR0FBR0EsQ0FBQSxLQUFNO0lBQ3hCOUMsWUFBWSxDQUFDLEtBQUssQ0FBQztFQUNyQixDQUFDO0VBRUQsTUFBTStDLFdBQVcsR0FBR0EsQ0FBQSxLQUFNO0lBQ3hCL0MsWUFBWSxDQUFDLEtBQUssQ0FBQzs7SUFFbkI7SUFDQSxJQUFJUixJQUFJLElBQUlNLFFBQVEsQ0FBQ2EsT0FBTyxFQUFFO01BQzVCLE1BQU1FLE9BQU8sR0FBR3JCLElBQUksQ0FBQ3FCLE9BQU8sSUFBSXJCLElBQUksQ0FBQ1csUUFBUSxJQUFJLENBQUM7TUFDbEQsTUFBTUYsV0FBVyxHQUFHSCxRQUFRLENBQUNhLE9BQU8sQ0FBQ1YsV0FBVzs7TUFFaEQ7TUFDQSxJQUFJQSxXQUFXLElBQUlZLE9BQU8sRUFBRTtRQUMxQm5CLFdBQVcsR0FBRyxDQUFDO1FBQ2Y7TUFDRjtJQUNGOztJQUVBO0lBQ0FRLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDakIsSUFBSUosUUFBUSxDQUFDYSxPQUFPLEVBQUU7TUFDcEJiLFFBQVEsQ0FBQ2EsT0FBTyxDQUFDVixXQUFXLEdBQUcsQ0FBQztJQUNsQztFQUNGLENBQUM7RUFFRCxNQUFNK0MsV0FBVyxHQUFHQSxDQUFBLEtBQU07SUFDeEJ4QyxXQUFXLENBQUMsSUFBSSxDQUFDO0lBQ2pCRixZQUFZLENBQUMsS0FBSyxDQUFDO0lBQ25CTixZQUFZLENBQUMsS0FBSyxDQUFDO0VBQ3JCLENBQUM7O0VBRUQ7RUFDQSxNQUFNaUQsZUFBZSxHQUFHQSxDQUFBLEtBQU07SUFDNUIsSUFBSSxDQUFDbkQsUUFBUSxDQUFDYSxPQUFPLElBQUlKLFFBQVEsRUFBRTtNQUNqQztJQUNGO0lBRUEsTUFBTVcsS0FBSyxHQUFHcEIsUUFBUSxDQUFDYSxPQUFPO0lBQzlCLE1BQU1DLFNBQVMsR0FBR3BCLElBQUksRUFBRW9CLFNBQVMsSUFBSSxDQUFDO0lBRXRDLElBQUliLFNBQVMsRUFBRTtNQUNibUIsS0FBSyxDQUFDMEIsS0FBSyxDQUFDLENBQUM7SUFDZixDQUFDLE1BQU07TUFDTDtNQUNBLElBQUloQyxTQUFTLEdBQUcsQ0FBQyxJQUFJTSxLQUFLLENBQUNqQixXQUFXLEdBQUdXLFNBQVMsRUFBRTtRQUNsRE0sS0FBSyxDQUFDakIsV0FBVyxHQUFHVyxTQUFTO01BQy9CO01BQ0FNLEtBQUssQ0FBQ2dDLElBQUksQ0FBQyxDQUFDO0lBQ2Q7RUFDRixDQUFDO0VBRUQsTUFBTUMsV0FBVyxHQUFJckIsQ0FBQyxJQUFLO0lBQ3pCLElBQUksQ0FBQ2hDLFFBQVEsQ0FBQ2EsT0FBTyxJQUFJSixRQUFRLElBQUksQ0FBQ2YsSUFBSSxFQUFFO0lBRTVDLE1BQU1tRCxPQUFPLEdBQUdTLFVBQVUsQ0FBQ3RCLENBQUMsQ0FBQ3VCLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDO0lBQzFDLE1BQU0xQyxTQUFTLEdBQUdwQixJQUFJLENBQUNvQixTQUFTLElBQUksQ0FBQztJQUNyQyxNQUFNQyxPQUFPLEdBQUdyQixJQUFJLENBQUNxQixPQUFPLElBQUlyQixJQUFJLENBQUNXLFFBQVEsSUFBSSxDQUFDOztJQUVsRDtJQUNBLE1BQU1XLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUNKLFNBQVMsRUFBRUcsSUFBSSxDQUFDRSxHQUFHLENBQUNKLE9BQU8sRUFBRThCLE9BQU8sQ0FBQyxDQUFDO0lBRW5FN0MsUUFBUSxDQUFDYSxPQUFPLENBQUNWLFdBQVcsR0FBR2EsV0FBVztJQUMxQ1osY0FBYyxDQUFDWSxXQUFXLENBQUM7RUFDN0IsQ0FBQzs7RUFFRDtFQUNBaEMsZ0RBQVMsQ0FBQyxNQUFNO0lBQ2QsTUFBTXlFLGFBQWEsR0FBSXpCLENBQUMsSUFBSztNQUMzQixJQUFJQSxDQUFDLENBQUNJLElBQUksS0FBSyxPQUFPLElBQUkxQyxJQUFJLElBQUksQ0FBQ2UsUUFBUSxFQUFFO1FBQzNDdUIsQ0FBQyxDQUFDMEIsY0FBYyxDQUFDLENBQUM7UUFDbEJQLGVBQWUsQ0FBQyxDQUFDO01BQ25CO0lBQ0YsQ0FBQztJQUVEUSxNQUFNLENBQUNDLGdCQUFnQixDQUFDLFNBQVMsRUFBRUgsYUFBYSxDQUFDO0lBQ2pELE9BQU8sTUFBTUUsTUFBTSxDQUFDRSxtQkFBbUIsQ0FBQyxTQUFTLEVBQUVKLGFBQWEsQ0FBQztFQUNuRSxDQUFDLEVBQUUsQ0FBQy9ELElBQUksRUFBRWUsUUFBUSxFQUFFUixTQUFTLENBQUMsQ0FBQzs7RUFFL0I7RUFDQSxJQUFJLENBQUNQLElBQUksRUFBRTtJQUNULG9CQUNFYiwwREFBQTtNQUFLa0YsU0FBUyxFQUFDO0lBQWUsZ0JBQzVCbEYsMERBQUE7TUFBS2tGLFNBQVMsRUFBQztJQUFxQixnQkFDbENsRiwwREFBQTtNQUFLa0YsU0FBUyxFQUFDO0lBQVksZ0JBQ3pCbEYsMERBQUEsQ0FBQ1Esb0RBQUs7TUFBQzJFLElBQUksRUFBRSxFQUFHO01BQUNDLFdBQVcsRUFBRTtJQUFJLENBQUUsQ0FDakMsQ0FBQyxlQUNOcEYsMERBQUEsYUFBSSxrQkFBb0IsQ0FBQyxlQUN6QkEsMERBQUE7TUFBR2tGLFNBQVMsRUFBQztJQUFZLEdBQUMsNENBQTZDLENBQ3BFLENBQ0YsQ0FBQztFQUVWOztFQUVBO0VBQ0EsSUFBSXRELFFBQVEsRUFBRTtJQUNaLG9CQUNFNUIsMERBQUE7TUFBS2tGLFNBQVMsRUFBQztJQUFlLGdCQUM1QmxGLDBEQUFBO01BQUtrRixTQUFTLEVBQUM7SUFBcUIsZ0JBQ2xDbEYsMERBQUE7TUFBS2tGLFNBQVMsRUFBQztJQUFrQixnQkFDL0JsRiwwREFBQSxDQUFDUyxvREFBYTtNQUFDMEUsSUFBSSxFQUFFLEVBQUc7TUFBQ0MsV0FBVyxFQUFFO0lBQUksQ0FBRSxDQUN6QyxDQUFDLGVBQ05wRiwwREFBQSxhQUFJLGFBQWUsQ0FBQyxlQUNwQkEsMERBQUE7TUFBR2tGLFNBQVMsRUFBQztJQUFZLEdBQUMsMkJBQTRCLENBQUMsZUFDdkRsRiwwREFBQTtNQUFHa0YsU0FBUyxFQUFDO0lBQVksR0FBRXJFLElBQUksQ0FBQ3dFLFFBQVksQ0FDekMsQ0FDRixDQUFDO0VBRVY7RUFFQSxvQkFDRXJGLDBEQUFBO0lBQUtrRixTQUFTLEVBQUM7RUFBZSxnQkFFNUJsRiwwREFBQTtJQUFLa0YsU0FBUyxFQUFDO0VBQWlCLGdCQUM5QmxGLDBEQUFBO0lBQ0VrQixHQUFHLEVBQUVDLFFBQVM7SUFDZCtELFNBQVMsRUFBQyxlQUFlO0lBQ3pCSSxnQkFBZ0IsRUFBRXZDLG9CQUFxQjtJQUN2Q3dDLFlBQVksRUFBRXhCLGdCQUFpQjtJQUMvQnlCLE1BQU0sRUFBRXRCLFVBQVc7SUFDbkJ1QixPQUFPLEVBQUV0QixXQUFZO0lBQ3JCdUIsT0FBTyxFQUFFdEIsV0FBWTtJQUNyQnVCLE9BQU8sRUFBRXRCLFdBQVk7SUFDckJ1QixPQUFPLEVBQUM7RUFBVSxDQUNuQixDQUFDLEVBR0RsRSxTQUFTLGlCQUNSMUIsMERBQUE7SUFBS2tGLFNBQVMsRUFBQztFQUFlLGdCQUM1QmxGLDBEQUFBO0lBQUtrRixTQUFTLEVBQUM7RUFBaUIsQ0FBTSxDQUFDLGVBQ3ZDbEYsMERBQUEsWUFBRyxrQkFBbUIsQ0FDbkIsQ0FFSixDQUFDLGVBR05BLDBEQUFBO0lBQUtrRixTQUFTLEVBQUM7RUFBZ0IsZ0JBRTdCbEYsMERBQUE7SUFDRWtGLFNBQVMsRUFBQyxzQkFBc0I7SUFDaENXLE9BQU8sRUFBRXZCLGVBQWdCO0lBQ3pCd0IsUUFBUSxFQUFFcEUsU0FBVTtJQUNwQnFFLEtBQUssRUFBRTNFLFNBQVMsR0FBRyxlQUFlLEdBQUc7RUFBZSxHQUVuREEsU0FBUyxnQkFBR3BCLDBEQUFBLENBQUNPLG9EQUFLO0lBQUM0RSxJQUFJLEVBQUU7RUFBRyxDQUFFLENBQUMsZ0JBQUduRiwwREFBQSxDQUFDTSxvREFBSTtJQUFDNkUsSUFBSSxFQUFFO0VBQUcsQ0FBRSxDQUM5QyxDQUFDLGVBR1RuRiwwREFBQTtJQUFLa0YsU0FBUyxFQUFDO0VBQWMsZ0JBQzNCbEYsMERBQUEsZUFBT1UsaUVBQWMsQ0FBQ1ksV0FBVyxDQUFRLENBQUMsZUFDMUN0QiwwREFBQTtJQUFNa0YsU0FBUyxFQUFDO0VBQWdCLEdBQUMsR0FBTyxDQUFDLGVBQ3pDbEYsMERBQUEsZUFBT1UsaUVBQWMsQ0FBQ2MsUUFBUSxDQUFRLENBQ25DLENBQUMsZUFHTnhCLDBEQUFBO0lBQUtrRixTQUFTLEVBQUM7RUFBb0IsZ0JBQ2pDbEYsMERBQUE7SUFDRWdHLElBQUksRUFBQyxPQUFPO0lBQ1pkLFNBQVMsRUFBQyxVQUFVO0lBQ3BCNUMsR0FBRyxFQUFFekIsSUFBSSxFQUFFb0IsU0FBUyxJQUFJLENBQUU7SUFDMUJJLEdBQUcsRUFBRXhCLElBQUksRUFBRXFCLE9BQU8sSUFBSVYsUUFBUSxJQUFJLENBQUU7SUFDcENtRCxLQUFLLEVBQUVyRCxXQUFZO0lBQ25CMkUsUUFBUSxFQUFFekIsV0FBWTtJQUN0QjBCLElBQUksRUFBQyxLQUFLO0lBQ1ZKLFFBQVEsRUFBRXBFLFNBQVMsSUFBSUYsUUFBUSxLQUFLO0VBQUUsQ0FDdkMsQ0FDRSxDQUNGLENBQUMsZUFHTnhCLDBEQUFBO0lBQUtrRixTQUFTLEVBQUM7RUFBZ0IsZ0JBQzdCbEYsMERBQUE7SUFBS2tGLFNBQVMsRUFBQztFQUFlLGdCQUM1QmxGLDBEQUFBO0lBQU1rRixTQUFTLEVBQUM7RUFBZ0IsR0FBQyxPQUFXLENBQUMsZUFDN0NsRiwwREFBQTtJQUFNa0YsU0FBUyxFQUFDLGdCQUFnQjtJQUFDYSxLQUFLLEVBQUVsRixJQUFJLENBQUN3RTtFQUFTLEdBQ25EeEUsSUFBSSxDQUFDd0UsUUFDRixDQUNILENBQUMsZUFDTnJGLDBEQUFBO0lBQUtrRixTQUFTLEVBQUM7RUFBZSxnQkFDNUJsRiwwREFBQTtJQUFNa0YsU0FBUyxFQUFDO0VBQWdCLEdBQUMsTUFBVSxDQUFDLGVBQzVDbEYsMERBQUE7SUFBTWtGLFNBQVMsRUFBQztFQUFnQixHQUM3QnZFLG1FQUFnQixDQUFDRSxJQUFJLENBQUNzRixLQUFLLEVBQUV0RixJQUFJLENBQUN1RixNQUFNLENBQ3JDLENBQ0gsQ0FBQyxlQUNOcEcsMERBQUE7SUFBS2tGLFNBQVMsRUFBQztFQUFlLGdCQUM1QmxGLDBEQUFBO0lBQU1rRixTQUFTLEVBQUM7RUFBZ0IsR0FBQyxNQUFVLENBQUMsZUFDNUNsRiwwREFBQTtJQUFNa0YsU0FBUyxFQUFDO0VBQWdCLEdBQzdCeEUsaUVBQWMsQ0FBQyxDQUFDRyxJQUFJLENBQUNxQixPQUFPLElBQUlyQixJQUFJLENBQUNXLFFBQVEsS0FBS1gsSUFBSSxDQUFDb0IsU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUNuRSxDQUNILENBQ0YsQ0FDRixDQUFDO0FBRVYsQ0FBQyxDQUFDO0FBRUZyQixZQUFZLENBQUN5RixXQUFXLEdBQUcsY0FBYztBQUV6QyxpRUFBZXpGLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGlwZm9yZ2UvLi9zcmMvY29tcG9uZW50cy9WaWRlb1ByZXZpZXcuanN4PzU4MTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlSW1wZXJhdGl2ZUhhbmRsZSwgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFBsYXksIFBhdXNlLCBWaWRlbywgQWxlcnRUcmlhbmdsZSB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG5pbXBvcnQgeyBmb3JtYXREdXJhdGlvbiwgZm9ybWF0UmVzb2x1dGlvbiB9IGZyb20gJy4uL3V0aWxzL2Zvcm1hdHRlcnMnO1xuaW1wb3J0ICcuL1ZpZGVvUHJldmlldy5jc3MnO1xuXG4vKipcbiAqIFZpZGVvUHJldmlldyBDb21wb25lbnRcbiAqIERpc3BsYXlzIHZpZGVvIHBsYXllciB3aXRoIGNvbnRyb2xzIGZvciB0aGUgc2VsZWN0ZWQgY2xpcFxuICovXG5jb25zdCBWaWRlb1ByZXZpZXcgPSBmb3J3YXJkUmVmKCh7IGNsaXAsIG9uUGxheWJhY2tDaGFuZ2UsIG9uQ2xpcEVuZGVkLCBzaG91bGRBdXRvUGxheSwgb25BdXRvUGxheVN0YXJ0ZWQgfSwgcmVmKSA9PiB7XG4gIGNvbnN0IHZpZGVvUmVmID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBbaXNQbGF5aW5nLCBzZXRJc1BsYXlpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbY3VycmVudFRpbWUsIHNldEN1cnJlbnRUaW1lXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbZHVyYXRpb24sIHNldER1cmF0aW9uXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbaGFzRXJyb3IsIHNldEhhc0Vycm9yXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAvLyBFeHBvc2Ugc2VlayBtZXRob2QgdG8gcGFyZW50IGNvbXBvbmVudFxuICB1c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgKCkgPT4gKHtcbiAgICBzZWVrVG86ICh0aW1lKSA9PiB7XG4gICAgICBpZiAodmlkZW9SZWYuY3VycmVudCAmJiBjbGlwKSB7XG4gICAgICAgIGNvbnN0IHRyaW1TdGFydCA9IGNsaXAudHJpbVN0YXJ0IHx8IDA7XG4gICAgICAgIGNvbnN0IHRyaW1FbmQgPSBjbGlwLnRyaW1FbmQgfHwgY2xpcC5kdXJhdGlvbiB8fCAwO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2xhbXAgc2VlayB0aW1lIHdpdGhpbiB0cmltIHJhbmdlXG4gICAgICAgIGNvbnN0IGNsYW1wZWRUaW1lID0gTWF0aC5tYXgodHJpbVN0YXJ0LCBNYXRoLm1pbih0cmltRW5kLCB0aW1lKSk7XG4gICAgICAgIFxuICAgICAgICB2aWRlb1JlZi5jdXJyZW50LmN1cnJlbnRUaW1lID0gY2xhbXBlZFRpbWU7XG4gICAgICAgIHNldEN1cnJlbnRUaW1lKGNsYW1wZWRUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pKTtcblxuICAvLyBSZXNldCBzdGF0ZSB3aGVuIGNsaXAgY2hhbmdlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghY2xpcCkge1xuICAgICAgc2V0SXNQbGF5aW5nKGZhbHNlKTtcbiAgICAgIHNldEN1cnJlbnRUaW1lKDApO1xuICAgICAgc2V0RHVyYXRpb24oMCk7XG4gICAgICBzZXRIYXNFcnJvcihmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUmVzZXQgcGxheWJhY2sgc3RhdGUgZm9yIG5ldyBjbGlwXG4gICAgc2V0SXNQbGF5aW5nKGZhbHNlKTtcbiAgICBzZXRDdXJyZW50VGltZShjbGlwLnRyaW1TdGFydCB8fCAwKTtcbiAgICBzZXREdXJhdGlvbihjbGlwLmR1cmF0aW9uIHx8IDApO1xuICAgIHNldEhhc0Vycm9yKGZhbHNlKTtcbiAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG5cbiAgICAvLyBMb2FkIG5ldyB2aWRlbyBzb3VyY2VcbiAgICBpZiAodmlkZW9SZWYuY3VycmVudCkge1xuICAgICAgY29uc3QgdmlkZW8gPSB2aWRlb1JlZi5jdXJyZW50O1xuICAgICAgXG4gICAgICAvLyBQcmVmZXIgY3VzdG9tIHByb3RvY29sIHRvIGF2b2lkIGZpbGU6Ly8gcmVzdHJpY3Rpb25zXG4gICAgICBjb25zdCByYXdQYXRoID0gY2xpcC5maWxlUGF0aC5yZXBsYWNlKC9eZmlsZTpcXC9cXC8vLCAnJyk7XG4gICAgICBjb25zdCB2aWRlb1NyYyA9IGBsb2NhbC1tZWRpYTovLyR7cmF3UGF0aH1gO1xuICAgICAgXG4gICAgICB2aWRlby5zcmMgPSB2aWRlb1NyYztcbiAgICAgIHZpZGVvLmxvYWQoKTtcblxuICAgICAgdmlkZW8ub25sb2FkZWRtZXRhZGF0YSA9ICgpID0+IHtcbiAgICAgICAgaGFuZGxlTG9hZGVkTWV0YWRhdGEoKTtcbiAgICAgIH07XG5cbiAgICAgIHZpZGVvLm9uY2FucGxheSA9ICgpID0+IHtcbiAgICAgICAgLy8gT25seSBzZWVrIHRvIHRyaW0gc3RhcnQgaWYgdmlkZW8gaXMgcmVhZHkgYW5kIHdlIGhhdmUgYSB0cmltIHN0YXJ0ID4gMFxuICAgICAgICBpZiAoY2xpcC50cmltU3RhcnQgPiAwICYmIHZpZGVvUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IHZpZGVvUmVmLmN1cnJlbnQuY3VycmVudFRpbWU7XG4gICAgICAgICAgLy8gT25seSBzZWVrIGlmIHdlJ3JlIG5vdCBhbHJlYWR5IGF0IHRoZSB0cmltIHN0YXJ0XG4gICAgICAgICAgaWYgKE1hdGguYWJzKGN1cnJlbnRUaW1lIC0gY2xpcC50cmltU3RhcnQpID4gMC4xKSB7XG4gICAgICAgICAgICB2aWRlb1JlZi5jdXJyZW50LmN1cnJlbnRUaW1lID0gY2xpcC50cmltU3RhcnQ7XG4gICAgICAgICAgICBzZXRDdXJyZW50VGltZShjbGlwLnRyaW1TdGFydCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2aWRlby5vbmVycm9yID0gKGUpID0+IHtcbiAgICAgICAgY29uc3QgbWVkaWFFcnJvciA9IHZpZGVvLmVycm9yIHx8IHt9O1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbVmlkZW9dIGVycm9yIGV2ZW50Jywge1xuICAgICAgICAgIHNyYzogdmlkZW9TcmMsXG4gICAgICAgICAgY29kZTogbWVkaWFFcnJvci5jb2RlLFxuICAgICAgICAgIG1lc3NhZ2U6IG1lZGlhRXJyb3IubWVzc2FnZSxcbiAgICAgICAgICBuZXR3b3JrU3RhdGU6IHZpZGVvLm5ldHdvcmtTdGF0ZSxcbiAgICAgICAgICByZWFkeVN0YXRlOiB2aWRlby5yZWFkeVN0YXRlLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5lcnJvcignVmlkZW8gZWxlbWVudCBlcnJvcjonLCBlKTtcbiAgICAgIH07XG5cbiAgICAgIHZpZGVvLm9uc3RhbGxlZCA9ICgpID0+IGNvbnNvbGUud2FybignW1ZpZGVvXSBzdGFsbGVkJywgeyBzcmM6IHZpZGVvU3JjIH0pO1xuICAgICAgdmlkZW8ub25zdXNwZW5kID0gKCkgPT4gY29uc29sZS53YXJuKCdbVmlkZW9dIHN1c3BlbmQnLCB7IHNyYzogdmlkZW9TcmMgfSk7XG4gICAgICB2aWRlby5vbndhaXRpbmcgPSAoKSA9PiBjb25zb2xlLndhcm4oJ1tWaWRlb10gd2FpdGluZycsIHsgc3JjOiB2aWRlb1NyYyB9KTtcbiAgICB9XG4gIH0sIFtjbGlwXSk7XG5cbiAgLy8gSGFuZGxlIHZpZGVvIGV2ZW50c1xuICBjb25zdCBoYW5kbGVMb2FkZWRNZXRhZGF0YSA9ICgpID0+IHtcbiAgICBpZiAodmlkZW9SZWYuY3VycmVudCkge1xuICAgICAgc2V0RHVyYXRpb24odmlkZW9SZWYuY3VycmVudC5kdXJhdGlvbiB8fCAwKTtcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVRpbWVVcGRhdGUgPSAoKSA9PiB7XG4gICAgaWYgKHZpZGVvUmVmLmN1cnJlbnQgJiYgY2xpcCkge1xuICAgICAgY29uc3QgdmlkZW8gPSB2aWRlb1JlZi5jdXJyZW50O1xuICAgICAgbGV0IG5ld1RpbWUgPSB2aWRlby5jdXJyZW50VGltZTtcbiAgICAgIFxuICAgICAgLy8gQ2xhbXAgdGltZSB3aXRoaW4gdHJpbSByYW5nZVxuICAgICAgY29uc3QgdHJpbVN0YXJ0ID0gY2xpcC50cmltU3RhcnQgfHwgMDtcbiAgICAgIGNvbnN0IHRyaW1FbmQgPSBjbGlwLnRyaW1FbmQgfHwgY2xpcC5kdXJhdGlvbiB8fCAwO1xuICAgICAgXG4gICAgICAvLyBPbmx5IGNsYW1wIGlmIHdlJ3JlIGFjdHVhbGx5IG91dHNpZGUgdGhlIHRyaW0gcmFuZ2VcbiAgICAgIGlmICh0cmltU3RhcnQgPiAwICYmIG5ld1RpbWUgPCB0cmltU3RhcnQpIHtcbiAgICAgICAgbmV3VGltZSA9IHRyaW1TdGFydDtcbiAgICAgICAgdmlkZW8uY3VycmVudFRpbWUgPSB0cmltU3RhcnQ7XG4gICAgICB9IGVsc2UgaWYgKHRyaW1FbmQgPCBjbGlwLmR1cmF0aW9uICYmIG5ld1RpbWUgPiB0cmltRW5kKSB7XG4gICAgICAgIG5ld1RpbWUgPSB0cmltRW5kO1xuICAgICAgICB2aWRlby5jdXJyZW50VGltZSA9IHRyaW1FbmQ7XG4gICAgICAgIHZpZGVvLnBhdXNlKCk7IC8vIFBhdXNlIHdoZW4gcmVhY2hpbmcgdHJpbSBlbmRcbiAgICAgICAgc2V0SXNQbGF5aW5nKGZhbHNlKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRyaWdnZXIgY29udGludW91cyBwbGF5YmFjayB0byBuZXh0IGNsaXBcbiAgICAgICAgb25DbGlwRW5kZWQ/LigpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBzZXRDdXJyZW50VGltZShuZXdUaW1lKTtcbiAgICAgIG9uUGxheWJhY2tDaGFuZ2U/LihuZXdUaW1lKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUGxheSA9ICgpID0+IHtcbiAgICBzZXRJc1BsYXlpbmcodHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUGF1c2UgPSAoKSA9PiB7XG4gICAgc2V0SXNQbGF5aW5nKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVFbmRlZCA9ICgpID0+IHtcbiAgICBzZXRJc1BsYXlpbmcoZmFsc2UpO1xuICAgIFxuICAgIC8vIElmIHdlJ3JlIGF0IHRoZSBuYXR1cmFsIGVuZCBvZiB0aGUgdmlkZW8sIHRyaWdnZXIgY29udGludW91cyBwbGF5YmFja1xuICAgIGlmIChjbGlwICYmIHZpZGVvUmVmLmN1cnJlbnQpIHtcbiAgICAgIGNvbnN0IHRyaW1FbmQgPSBjbGlwLnRyaW1FbmQgfHwgY2xpcC5kdXJhdGlvbiB8fCAwO1xuICAgICAgY29uc3QgY3VycmVudFRpbWUgPSB2aWRlb1JlZi5jdXJyZW50LmN1cnJlbnRUaW1lO1xuICAgICAgXG4gICAgICAvLyBJZiB3ZSdyZSBhdCBvciBwYXN0IHRoZSB0cmltIGVuZCwgdHJpZ2dlciBuZXh0IGNsaXBcbiAgICAgIGlmIChjdXJyZW50VGltZSA+PSB0cmltRW5kKSB7XG4gICAgICAgIG9uQ2xpcEVuZGVkPy4oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBPdGhlcndpc2UsIHJlc2V0IHRvIGJlZ2lubmluZ1xuICAgIHNldEN1cnJlbnRUaW1lKDApO1xuICAgIGlmICh2aWRlb1JlZi5jdXJyZW50KSB7XG4gICAgICB2aWRlb1JlZi5jdXJyZW50LmN1cnJlbnRUaW1lID0gMDtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRXJyb3IgPSAoKSA9PiB7XG4gICAgc2V0SGFzRXJyb3IodHJ1ZSk7XG4gICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICBzZXRJc1BsYXlpbmcoZmFsc2UpO1xuICB9O1xuXG4gIC8vIFBsYXliYWNrIGNvbnRyb2xzXG4gIGNvbnN0IHRvZ2dsZVBsYXlQYXVzZSA9ICgpID0+IHtcbiAgICBpZiAoIXZpZGVvUmVmLmN1cnJlbnQgfHwgaGFzRXJyb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB2aWRlbyA9IHZpZGVvUmVmLmN1cnJlbnQ7XG4gICAgY29uc3QgdHJpbVN0YXJ0ID0gY2xpcD8udHJpbVN0YXJ0IHx8IDA7XG4gICAgXG4gICAgaWYgKGlzUGxheWluZykge1xuICAgICAgdmlkZW8ucGF1c2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRW5zdXJlIHdlJ3JlIGF0IHRyaW0gc3RhcnQgaWYgbmVlZGVkXG4gICAgICBpZiAodHJpbVN0YXJ0ID4gMCAmJiB2aWRlby5jdXJyZW50VGltZSA8IHRyaW1TdGFydCkge1xuICAgICAgICB2aWRlby5jdXJyZW50VGltZSA9IHRyaW1TdGFydDtcbiAgICAgIH1cbiAgICAgIHZpZGVvLnBsYXkoKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlU2NydWIgPSAoZSkgPT4ge1xuICAgIGlmICghdmlkZW9SZWYuY3VycmVudCB8fCBoYXNFcnJvciB8fCAhY2xpcCkgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IG5ld1RpbWUgPSBwYXJzZUZsb2F0KGUudGFyZ2V0LnZhbHVlKTtcbiAgICBjb25zdCB0cmltU3RhcnQgPSBjbGlwLnRyaW1TdGFydCB8fCAwO1xuICAgIGNvbnN0IHRyaW1FbmQgPSBjbGlwLnRyaW1FbmQgfHwgY2xpcC5kdXJhdGlvbiB8fCAwO1xuICAgIFxuICAgIC8vIENsYW1wIHNjcnViYmVyIHZhbHVlIHdpdGhpbiB0cmltIHJhbmdlXG4gICAgY29uc3QgY2xhbXBlZFRpbWUgPSBNYXRoLm1heCh0cmltU3RhcnQsIE1hdGgubWluKHRyaW1FbmQsIG5ld1RpbWUpKTtcbiAgICBcbiAgICB2aWRlb1JlZi5jdXJyZW50LmN1cnJlbnRUaW1lID0gY2xhbXBlZFRpbWU7XG4gICAgc2V0Q3VycmVudFRpbWUoY2xhbXBlZFRpbWUpO1xuICB9O1xuXG4gIC8vIEtleWJvYXJkIHNob3J0Y3V0IGhhbmRsZXJcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVLZXlEb3duID0gKGUpID0+IHtcbiAgICAgIGlmIChlLmNvZGUgPT09ICdTcGFjZScgJiYgY2xpcCAmJiAhaGFzRXJyb3IpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0b2dnbGVQbGF5UGF1c2UoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duKTtcbiAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duKTtcbiAgfSwgW2NsaXAsIGhhc0Vycm9yLCBpc1BsYXlpbmddKTtcblxuICAvLyBObyBjbGlwIHNlbGVjdGVkIHN0YXRlXG4gIGlmICghY2xpcCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZGVvLXByZXZpZXdcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcmV2aWV3LXBsYWNlaG9sZGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbXB0eS1pY29uXCI+XG4gICAgICAgICAgICA8VmlkZW8gc2l6ZT17ODB9IHN0cm9rZVdpZHRoPXsxLjV9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgyPk5vIGNsaXAgc2VsZWN0ZWQ8L2gyPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtbXV0ZWRcIj5TZWxlY3QgYSBjbGlwIGZyb20gdGhlIHRpbWVsaW5lIHRvIHByZXZpZXc8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIC8vIEVycm9yIHN0YXRlXG4gIGlmIChoYXNFcnJvcikge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZGVvLXByZXZpZXdcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcmV2aWV3LXBsYWNlaG9sZGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlbXB0eS1pY29uIGVycm9yXCI+XG4gICAgICAgICAgICA8QWxlcnRUcmlhbmdsZSBzaXplPXs4MH0gc3Ryb2tlV2lkdGg9ezEuNX0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDI+VmlkZW8gRXJyb3I8L2gyPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtbXV0ZWRcIj5VbmFibGUgdG8gbG9hZCB2aWRlbyBmaWxlPC9wPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtbXV0ZWRcIj57Y2xpcC5maWxlTmFtZX08L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ2aWRlby1wcmV2aWV3XCI+XG4gICAgICB7LyogVmlkZW8gQ29udGFpbmVyICovfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWRlby1jb250YWluZXJcIj5cbiAgICAgICAgPHZpZGVvXG4gICAgICAgICAgcmVmPXt2aWRlb1JlZn1cbiAgICAgICAgICBjbGFzc05hbWU9XCJ2aWRlby1lbGVtZW50XCJcbiAgICAgICAgICBvbkxvYWRlZE1ldGFkYXRhPXtoYW5kbGVMb2FkZWRNZXRhZGF0YX1cbiAgICAgICAgICBvblRpbWVVcGRhdGU9e2hhbmRsZVRpbWVVcGRhdGV9XG4gICAgICAgICAgb25QbGF5PXtoYW5kbGVQbGF5fVxuICAgICAgICAgIG9uUGF1c2U9e2hhbmRsZVBhdXNlfVxuICAgICAgICAgIG9uRW5kZWQ9e2hhbmRsZUVuZGVkfVxuICAgICAgICAgIG9uRXJyb3I9e2hhbmRsZUVycm9yfVxuICAgICAgICAgIHByZWxvYWQ9XCJtZXRhZGF0YVwiXG4gICAgICAgIC8+XG4gICAgICAgIFxuICAgICAgICB7LyogTG9hZGluZyBvdmVybGF5ICovfVxuICAgICAgICB7aXNMb2FkaW5nICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZGVvLWxvYWRpbmdcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9hZGluZy1zcGlubmVyXCI+PC9kaXY+XG4gICAgICAgICAgICA8cD5Mb2FkaW5nIHZpZGVvLi4uPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG5cbiAgICAgIHsvKiBWaWRlbyBDb250cm9scyAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlkZW8tY29udHJvbHNcIj5cbiAgICAgICAgey8qIFBsYXkvUGF1c2UgQnV0dG9uICovfVxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPVwiY29udHJvbC1idG4gcGxheS1idG5cIlxuICAgICAgICAgIG9uQ2xpY2s9e3RvZ2dsZVBsYXlQYXVzZX1cbiAgICAgICAgICBkaXNhYmxlZD17aXNMb2FkaW5nfVxuICAgICAgICAgIHRpdGxlPXtpc1BsYXlpbmcgPyAnUGF1c2UgKFNwYWNlKScgOiAnUGxheSAoU3BhY2UpJ31cbiAgICAgICAgPlxuICAgICAgICAgIHtpc1BsYXlpbmcgPyA8UGF1c2Ugc2l6ZT17MTh9IC8+IDogPFBsYXkgc2l6ZT17MTh9IC8+fVxuICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICB7LyogVGltZSBEaXNwbGF5ICovfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpbWUtZGlzcGxheVwiPlxuICAgICAgICAgIDxzcGFuPntmb3JtYXREdXJhdGlvbihjdXJyZW50VGltZSl9PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRpbWUtc2VwYXJhdG9yXCI+Lzwvc3Bhbj5cbiAgICAgICAgICA8c3Bhbj57Zm9ybWF0RHVyYXRpb24oZHVyYXRpb24pfTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgey8qIFNjcnViYmVyICovfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNjcnViYmVyLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInJhbmdlXCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInNjcnViYmVyXCJcbiAgICAgICAgICAgIG1pbj17Y2xpcD8udHJpbVN0YXJ0IHx8IDB9XG4gICAgICAgICAgICBtYXg9e2NsaXA/LnRyaW1FbmQgfHwgZHVyYXRpb24gfHwgMH1cbiAgICAgICAgICAgIHZhbHVlPXtjdXJyZW50VGltZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVTY3J1Yn1cbiAgICAgICAgICAgIHN0ZXA9XCIwLjFcIlxuICAgICAgICAgICAgZGlzYWJsZWQ9e2lzTG9hZGluZyB8fCBkdXJhdGlvbiA9PT0gMH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICB7LyogVmlkZW8gTWV0YWRhdGEgKi99XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZGVvLW1ldGFkYXRhXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWV0YWRhdGEtaXRlbVwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1ldGFkYXRhLWxhYmVsXCI+RmlsZTo8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibWV0YWRhdGEtdmFsdWVcIiB0aXRsZT17Y2xpcC5maWxlTmFtZX0+XG4gICAgICAgICAgICB7Y2xpcC5maWxlTmFtZX1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1ldGFkYXRhLWl0ZW1cIj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtZXRhZGF0YS1sYWJlbFwiPlJlczo8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibWV0YWRhdGEtdmFsdWVcIj5cbiAgICAgICAgICAgIHtmb3JtYXRSZXNvbHV0aW9uKGNsaXAud2lkdGgsIGNsaXAuaGVpZ2h0KX1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1ldGFkYXRhLWl0ZW1cIj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtZXRhZGF0YS1sYWJlbFwiPkR1cjo8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibWV0YWRhdGEtdmFsdWVcIj5cbiAgICAgICAgICAgIHtmb3JtYXREdXJhdGlvbigoY2xpcC50cmltRW5kIHx8IGNsaXAuZHVyYXRpb24pIC0gKGNsaXAudHJpbVN0YXJ0IHx8IDApKX1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59KTtcblxuVmlkZW9QcmV2aWV3LmRpc3BsYXlOYW1lID0gJ1ZpZGVvUHJldmlldyc7XG5cbmV4cG9ydCBkZWZhdWx0IFZpZGVvUHJldmlldztcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsImZvcndhcmRSZWYiLCJQbGF5IiwiUGF1c2UiLCJWaWRlbyIsIkFsZXJ0VHJpYW5nbGUiLCJmb3JtYXREdXJhdGlvbiIsImZvcm1hdFJlc29sdXRpb24iLCJWaWRlb1ByZXZpZXciLCJjbGlwIiwib25QbGF5YmFja0NoYW5nZSIsIm9uQ2xpcEVuZGVkIiwic2hvdWxkQXV0b1BsYXkiLCJvbkF1dG9QbGF5U3RhcnRlZCIsInJlZiIsInZpZGVvUmVmIiwiaXNQbGF5aW5nIiwic2V0SXNQbGF5aW5nIiwiY3VycmVudFRpbWUiLCJzZXRDdXJyZW50VGltZSIsImR1cmF0aW9uIiwic2V0RHVyYXRpb24iLCJpc0xvYWRpbmciLCJzZXRJc0xvYWRpbmciLCJoYXNFcnJvciIsInNldEhhc0Vycm9yIiwic2Vla1RvIiwidGltZSIsImN1cnJlbnQiLCJ0cmltU3RhcnQiLCJ0cmltRW5kIiwiY2xhbXBlZFRpbWUiLCJNYXRoIiwibWF4IiwibWluIiwidmlkZW8iLCJyYXdQYXRoIiwiZmlsZVBhdGgiLCJyZXBsYWNlIiwidmlkZW9TcmMiLCJzcmMiLCJsb2FkIiwib25sb2FkZWRtZXRhZGF0YSIsImhhbmRsZUxvYWRlZE1ldGFkYXRhIiwib25jYW5wbGF5IiwiYWJzIiwib25lcnJvciIsImUiLCJtZWRpYUVycm9yIiwiZXJyb3IiLCJjb25zb2xlIiwiY29kZSIsIm1lc3NhZ2UiLCJuZXR3b3JrU3RhdGUiLCJyZWFkeVN0YXRlIiwib25zdGFsbGVkIiwid2FybiIsIm9uc3VzcGVuZCIsIm9ud2FpdGluZyIsImhhbmRsZVRpbWVVcGRhdGUiLCJuZXdUaW1lIiwicGF1c2UiLCJoYW5kbGVQbGF5IiwiaGFuZGxlUGF1c2UiLCJoYW5kbGVFbmRlZCIsImhhbmRsZUVycm9yIiwidG9nZ2xlUGxheVBhdXNlIiwicGxheSIsImhhbmRsZVNjcnViIiwicGFyc2VGbG9hdCIsInRhcmdldCIsInZhbHVlIiwiaGFuZGxlS2V5RG93biIsInByZXZlbnREZWZhdWx0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwic2l6ZSIsInN0cm9rZVdpZHRoIiwiZmlsZU5hbWUiLCJvbkxvYWRlZE1ldGFkYXRhIiwib25UaW1lVXBkYXRlIiwib25QbGF5Iiwib25QYXVzZSIsIm9uRW5kZWQiLCJvbkVycm9yIiwicHJlbG9hZCIsIm9uQ2xpY2siLCJkaXNhYmxlZCIsInRpdGxlIiwidHlwZSIsIm9uQ2hhbmdlIiwic3RlcCIsIndpZHRoIiwiaGVpZ2h0IiwiZGlzcGxheU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/VideoPreview.jsx\n\n}");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("889803ace48c3d8bf3a6")
/******/ })();
/******/ 
/******/ }
);