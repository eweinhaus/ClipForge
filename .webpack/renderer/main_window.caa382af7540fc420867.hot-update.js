"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateclipforge"]("main_window",{

/***/ "./src/components/VideoPreview.jsx":
/*!*****************************************!*\
  !*** ./src/components/VideoPreview.jsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/triangle-alert.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/pause.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/play.js\");\n/* harmony import */ var lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lucide-react */ \"./node_modules/lucide-react/dist/esm/icons/video.js\");\n/* harmony import */ var _utils_formatters__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/formatters */ \"./src/utils/formatters.js\");\n/* harmony import */ var _VideoPreview_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./VideoPreview.css */ \"./src/components/VideoPreview.css\");\n\n\n\n\n\n/**\n * VideoPreview Component\n * Displays video player with controls for the selected clip\n */\nconst VideoPreview = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({\n  clip,\n  onPlaybackChange,\n  onClipEnded\n}, ref) => {\n  const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const [isPlaying, setIsPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [currentTime, setCurrentTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  const [duration, setDuration] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [hasError, setHasError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n\n  // Expose seek method to parent component\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, () => ({\n    seekTo: time => {\n      if (videoRef.current && clip) {\n        const trimStart = clip.trimStart || 0;\n        const trimEnd = clip.trimEnd || clip.duration || 0;\n\n        // Clamp seek time within trim range\n        const clampedTime = Math.max(trimStart, Math.min(trimEnd, time));\n        videoRef.current.currentTime = clampedTime;\n        setCurrentTime(clampedTime);\n      }\n    }\n  }));\n\n  // Reset state when clip changes\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!clip) {\n      setIsPlaying(false);\n      setCurrentTime(0);\n      setDuration(0);\n      setHasError(false);\n      return;\n    }\n\n    // Reset playback state for new clip\n    setIsPlaying(false);\n    setCurrentTime(clip.trimStart || 0);\n    setDuration(clip.duration || 0);\n    setHasError(false);\n    setIsLoading(true);\n\n    // Load new video source\n    if (videoRef.current) {\n      const video = videoRef.current;\n\n      // Prefer custom protocol to avoid file:// restrictions\n      const rawPath = clip.filePath.replace(/^file:\\/\\//, '');\n      const videoSrc = `local-media://${rawPath}`;\n      video.src = videoSrc;\n      video.load();\n      video.onloadedmetadata = () => {\n        handleLoadedMetadata();\n      };\n      video.oncanplay = () => {\n        // Only seek to trim start if video is ready and we have a trim start > 0\n        if (clip.trimStart > 0 && videoRef.current) {\n          const currentTime = videoRef.current.currentTime;\n          // Only seek if we're not already at the trim start\n          if (Math.abs(currentTime - clip.trimStart) > 0.1) {\n            videoRef.current.currentTime = clip.trimStart;\n            setCurrentTime(clip.trimStart);\n          }\n        }\n      };\n      video.onerror = e => {\n        const mediaError = video.error || {};\n        console.error('[Video] error event', {\n          src: videoSrc,\n          code: mediaError.code,\n          message: mediaError.message,\n          networkState: video.networkState,\n          readyState: video.readyState\n        });\n        console.error('Video element error:', e);\n      };\n      video.onstalled = () => console.warn('[Video] stalled', {\n        src: videoSrc\n      });\n      video.onsuspend = () => console.warn('[Video] suspend', {\n        src: videoSrc\n      });\n      video.onwaiting = () => console.warn('[Video] waiting', {\n        src: videoSrc\n      });\n    }\n  }, [clip]);\n\n  // Handle video events\n  const handleLoadedMetadata = () => {\n    if (videoRef.current) {\n      setDuration(videoRef.current.duration || 0);\n      setIsLoading(false);\n    }\n  };\n  const handleTimeUpdate = () => {\n    if (videoRef.current && clip) {\n      const video = videoRef.current;\n      let newTime = video.currentTime;\n\n      // Clamp time within trim range\n      const trimStart = clip.trimStart || 0;\n      const trimEnd = clip.trimEnd || clip.duration || 0;\n\n      // Only clamp if we're actually outside the trim range\n      if (trimStart > 0 && newTime < trimStart) {\n        newTime = trimStart;\n        video.currentTime = trimStart;\n      } else if (trimEnd < clip.duration && newTime > trimEnd) {\n        newTime = trimEnd;\n        video.currentTime = trimEnd;\n        video.pause(); // Pause when reaching trim end\n        setIsPlaying(false);\n\n        // Trigger continuous playback to next clip\n        onClipEnded?.();\n      }\n      setCurrentTime(newTime);\n      onPlaybackChange?.(newTime);\n    }\n  };\n  const handlePlay = () => {\n    setIsPlaying(true);\n  };\n  const handlePause = () => {\n    setIsPlaying(false);\n  };\n  const handleEnded = () => {\n    setIsPlaying(false);\n\n    // If we're at the natural end of the video, trigger continuous playback\n    if (clip && videoRef.current) {\n      const trimEnd = clip.trimEnd || clip.duration || 0;\n      const currentTime = videoRef.current.currentTime;\n\n      // If we're at or past the trim end, trigger next clip\n      if (currentTime >= trimEnd) {\n        onClipEnded?.();\n        return;\n      }\n    }\n\n    // Otherwise, reset to beginning\n    setCurrentTime(0);\n    if (videoRef.current) {\n      videoRef.current.currentTime = 0;\n    }\n  };\n  const handleError = () => {\n    setHasError(true);\n    setIsLoading(false);\n    setIsPlaying(false);\n  };\n\n  // Playback controls\n  const togglePlayPause = () => {\n    if (!videoRef.current || hasError) {\n      return;\n    }\n    const video = videoRef.current;\n    const trimStart = clip?.trimStart || 0;\n    if (isPlaying) {\n      video.pause();\n    } else {\n      // Ensure we're at trim start if needed\n      if (trimStart > 0 && video.currentTime < trimStart) {\n        video.currentTime = trimStart;\n      }\n      video.play();\n    }\n  };\n  const handleScrub = e => {\n    if (!videoRef.current || hasError || !clip) return;\n    const newTime = parseFloat(e.target.value);\n    const trimStart = clip.trimStart || 0;\n    const trimEnd = clip.trimEnd || clip.duration || 0;\n\n    // Clamp scrubber value within trim range\n    const clampedTime = Math.max(trimStart, Math.min(trimEnd, newTime));\n    videoRef.current.currentTime = clampedTime;\n    setCurrentTime(clampedTime);\n  };\n\n  // Keyboard shortcut handler\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && clip && !hasError) {\n        e.preventDefault();\n        togglePlayPause();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [clip, hasError, isPlaying]);\n\n  // No clip selected state\n  if (!clip) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n      className: \"video-preview\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n      className: \"preview-placeholder\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n      className: \"empty-icon\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n      size: 80,\n      strokeWidth: 1.5\n    })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"h2\", null, \"No clip selected\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", {\n      className: \"text-muted\"\n    }, \"Select a clip from the timeline to preview\")));\n  }\n\n  // Error state\n  if (hasError) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n      className: \"video-preview\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n      className: \"preview-placeholder\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n      className: \"empty-icon error\"\n    }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(lucide_react__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n      size: 80,\n      strokeWidth: 1.5\n    })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"h2\", null, \"Video Error\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", {\n      className: \"text-muted\"\n    }, \"Unable to load video file\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", {\n      className: \"text-muted\"\n    }, clip.fileName)));\n  }\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"video-preview\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"video-container\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"video\", {\n    ref: videoRef,\n    className: \"video-element\",\n    onLoadedMetadata: handleLoadedMetadata,\n    onTimeUpdate: handleTimeUpdate,\n    onPlay: handlePlay,\n    onPause: handlePause,\n    onEnded: handleEnded,\n    onError: handleError,\n    preload: \"metadata\"\n  }), isLoading && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"video-loading\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"loading-spinner\"\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", null, \"Loading video...\"))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"video-controls\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n    className: \"control-btn play-btn\",\n    onClick: togglePlayPause,\n    disabled: isLoading,\n    title: isPlaying ? 'Pause (Space)' : 'Play (Space)'\n  }, isPlaying ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n    size: 18\n  }) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n    size: 18\n  })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"time-display\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", null, (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_5__.formatDuration)(currentTime)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n    className: \"time-separator\"\n  }, \"/\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", null, (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_5__.formatDuration)(duration))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"scrubber-container\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\n    type: \"range\",\n    className: \"scrubber\",\n    min: clip?.trimStart || 0,\n    max: clip?.trimEnd || duration || 0,\n    value: currentTime,\n    onChange: handleScrub,\n    step: \"0.1\",\n    disabled: isLoading || duration === 0\n  }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"video-metadata\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"metadata-item\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n    className: \"metadata-label\"\n  }, \"File:\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n    className: \"metadata-value\",\n    title: clip.fileName\n  }, clip.fileName)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"metadata-item\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n    className: \"metadata-label\"\n  }, \"Res:\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n    className: \"metadata-value\"\n  }, (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_5__.formatResolution)(clip.width, clip.height))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    className: \"metadata-item\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n    className: \"metadata-label\"\n  }, \"Dur:\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n    className: \"metadata-value\"\n  }, (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_5__.formatDuration)((clip.trimEnd || clip.duration) - (clip.trimStart || 0))))));\n});\nVideoPreview.displayName = 'VideoPreview';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VideoPreview);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9WaWRlb1ByZXZpZXcuanN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUE0RjtBQUMzQjtBQUNNO0FBQzNDOztBQUU1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1ZLFlBQVksZ0JBQUdQLGlEQUFVLENBQUMsQ0FBQztFQUFFUSxJQUFJO0VBQUVDLGdCQUFnQjtFQUFFQztBQUFZLENBQUMsRUFBRUMsR0FBRyxLQUFLO0VBQ2hGLE1BQU1DLFFBQVEsR0FBR2hCLDZDQUFNLENBQUMsSUFBSSxDQUFDO0VBQzdCLE1BQU0sQ0FBQ2lCLFNBQVMsRUFBRUMsWUFBWSxDQUFDLEdBQUdqQiwrQ0FBUSxDQUFDLEtBQUssQ0FBQztFQUNqRCxNQUFNLENBQUNrQixXQUFXLEVBQUVDLGNBQWMsQ0FBQyxHQUFHbkIsK0NBQVEsQ0FBQyxDQUFDLENBQUM7RUFDakQsTUFBTSxDQUFDb0IsUUFBUSxFQUFFQyxXQUFXLENBQUMsR0FBR3JCLCtDQUFRLENBQUMsQ0FBQyxDQUFDO0VBQzNDLE1BQU0sQ0FBQ3NCLFNBQVMsRUFBRUMsWUFBWSxDQUFDLEdBQUd2QiwrQ0FBUSxDQUFDLEtBQUssQ0FBQztFQUNqRCxNQUFNLENBQUN3QixRQUFRLEVBQUVDLFdBQVcsQ0FBQyxHQUFHekIsK0NBQVEsQ0FBQyxLQUFLLENBQUM7O0VBRS9DO0VBQ0FFLDBEQUFtQixDQUFDWSxHQUFHLEVBQUUsT0FBTztJQUM5QlksTUFBTSxFQUFHQyxJQUFJLElBQUs7TUFDaEIsSUFBSVosUUFBUSxDQUFDYSxPQUFPLElBQUlqQixJQUFJLEVBQUU7UUFDNUIsTUFBTWtCLFNBQVMsR0FBR2xCLElBQUksQ0FBQ2tCLFNBQVMsSUFBSSxDQUFDO1FBQ3JDLE1BQU1DLE9BQU8sR0FBR25CLElBQUksQ0FBQ21CLE9BQU8sSUFBSW5CLElBQUksQ0FBQ1MsUUFBUSxJQUFJLENBQUM7O1FBRWxEO1FBQ0EsTUFBTVcsV0FBVyxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0osU0FBUyxFQUFFRyxJQUFJLENBQUNFLEdBQUcsQ0FBQ0osT0FBTyxFQUFFSCxJQUFJLENBQUMsQ0FBQztRQUVoRVosUUFBUSxDQUFDYSxPQUFPLENBQUNWLFdBQVcsR0FBR2EsV0FBVztRQUMxQ1osY0FBYyxDQUFDWSxXQUFXLENBQUM7TUFDN0I7SUFDRjtFQUNGLENBQUMsQ0FBQyxDQUFDOztFQUVIO0VBQ0E5QixnREFBUyxDQUFDLE1BQU07SUFDZCxJQUFJLENBQUNVLElBQUksRUFBRTtNQUNUTSxZQUFZLENBQUMsS0FBSyxDQUFDO01BQ25CRSxjQUFjLENBQUMsQ0FBQyxDQUFDO01BQ2pCRSxXQUFXLENBQUMsQ0FBQyxDQUFDO01BQ2RJLFdBQVcsQ0FBQyxLQUFLLENBQUM7TUFDbEI7SUFDRjs7SUFFQTtJQUNBUixZQUFZLENBQUMsS0FBSyxDQUFDO0lBQ25CRSxjQUFjLENBQUNSLElBQUksQ0FBQ2tCLFNBQVMsSUFBSSxDQUFDLENBQUM7SUFDbkNSLFdBQVcsQ0FBQ1YsSUFBSSxDQUFDUyxRQUFRLElBQUksQ0FBQyxDQUFDO0lBQy9CSyxXQUFXLENBQUMsS0FBSyxDQUFDO0lBQ2xCRixZQUFZLENBQUMsSUFBSSxDQUFDOztJQUVsQjtJQUNBLElBQUlSLFFBQVEsQ0FBQ2EsT0FBTyxFQUFFO01BQ3BCLE1BQU1PLEtBQUssR0FBR3BCLFFBQVEsQ0FBQ2EsT0FBTzs7TUFFOUI7TUFDQSxNQUFNUSxPQUFPLEdBQUd6QixJQUFJLENBQUMwQixRQUFRLENBQUNDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDO01BQ3ZELE1BQU1DLFFBQVEsR0FBRyxpQkFBaUJILE9BQU8sRUFBRTtNQUUzQ0QsS0FBSyxDQUFDSyxHQUFHLEdBQUdELFFBQVE7TUFDcEJKLEtBQUssQ0FBQ00sSUFBSSxDQUFDLENBQUM7TUFFWk4sS0FBSyxDQUFDTyxnQkFBZ0IsR0FBRyxNQUFNO1FBQzdCQyxvQkFBb0IsQ0FBQyxDQUFDO01BQ3hCLENBQUM7TUFFRFIsS0FBSyxDQUFDUyxTQUFTLEdBQUcsTUFBTTtRQUN0QjtRQUNBLElBQUlqQyxJQUFJLENBQUNrQixTQUFTLEdBQUcsQ0FBQyxJQUFJZCxRQUFRLENBQUNhLE9BQU8sRUFBRTtVQUMxQyxNQUFNVixXQUFXLEdBQUdILFFBQVEsQ0FBQ2EsT0FBTyxDQUFDVixXQUFXO1VBQ2hEO1VBQ0EsSUFBSWMsSUFBSSxDQUFDYSxHQUFHLENBQUMzQixXQUFXLEdBQUdQLElBQUksQ0FBQ2tCLFNBQVMsQ0FBQyxHQUFHLEdBQUcsRUFBRTtZQUNoRGQsUUFBUSxDQUFDYSxPQUFPLENBQUNWLFdBQVcsR0FBR1AsSUFBSSxDQUFDa0IsU0FBUztZQUM3Q1YsY0FBYyxDQUFDUixJQUFJLENBQUNrQixTQUFTLENBQUM7VUFDaEM7UUFDRjtNQUNGLENBQUM7TUFFRE0sS0FBSyxDQUFDVyxPQUFPLEdBQUlDLENBQUMsSUFBSztRQUNyQixNQUFNQyxVQUFVLEdBQUdiLEtBQUssQ0FBQ2MsS0FBSyxJQUFJLENBQUMsQ0FBQztRQUNwQ0MsT0FBTyxDQUFDRCxLQUFLLENBQUMscUJBQXFCLEVBQUU7VUFDbkNULEdBQUcsRUFBRUQsUUFBUTtVQUNiWSxJQUFJLEVBQUVILFVBQVUsQ0FBQ0csSUFBSTtVQUNyQkMsT0FBTyxFQUFFSixVQUFVLENBQUNJLE9BQU87VUFDM0JDLFlBQVksRUFBRWxCLEtBQUssQ0FBQ2tCLFlBQVk7VUFDaENDLFVBQVUsRUFBRW5CLEtBQUssQ0FBQ21CO1FBQ3BCLENBQUMsQ0FBQztRQUNGSixPQUFPLENBQUNELEtBQUssQ0FBQyxzQkFBc0IsRUFBRUYsQ0FBQyxDQUFDO01BQzFDLENBQUM7TUFFRFosS0FBSyxDQUFDb0IsU0FBUyxHQUFHLE1BQU1MLE9BQU8sQ0FBQ00sSUFBSSxDQUFDLGlCQUFpQixFQUFFO1FBQUVoQixHQUFHLEVBQUVEO01BQVMsQ0FBQyxDQUFDO01BQzFFSixLQUFLLENBQUNzQixTQUFTLEdBQUcsTUFBTVAsT0FBTyxDQUFDTSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7UUFBRWhCLEdBQUcsRUFBRUQ7TUFBUyxDQUFDLENBQUM7TUFDMUVKLEtBQUssQ0FBQ3VCLFNBQVMsR0FBRyxNQUFNUixPQUFPLENBQUNNLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtRQUFFaEIsR0FBRyxFQUFFRDtNQUFTLENBQUMsQ0FBQztJQUM1RTtFQUNGLENBQUMsRUFBRSxDQUFDNUIsSUFBSSxDQUFDLENBQUM7O0VBRVY7RUFDQSxNQUFNZ0Msb0JBQW9CLEdBQUdBLENBQUEsS0FBTTtJQUNqQyxJQUFJNUIsUUFBUSxDQUFDYSxPQUFPLEVBQUU7TUFDcEJQLFdBQVcsQ0FBQ04sUUFBUSxDQUFDYSxPQUFPLENBQUNSLFFBQVEsSUFBSSxDQUFDLENBQUM7TUFDM0NHLFlBQVksQ0FBQyxLQUFLLENBQUM7SUFDckI7RUFDRixDQUFDO0VBRUQsTUFBTW9DLGdCQUFnQixHQUFHQSxDQUFBLEtBQU07SUFDN0IsSUFBSTVDLFFBQVEsQ0FBQ2EsT0FBTyxJQUFJakIsSUFBSSxFQUFFO01BQzVCLE1BQU13QixLQUFLLEdBQUdwQixRQUFRLENBQUNhLE9BQU87TUFDOUIsSUFBSWdDLE9BQU8sR0FBR3pCLEtBQUssQ0FBQ2pCLFdBQVc7O01BRS9CO01BQ0EsTUFBTVcsU0FBUyxHQUFHbEIsSUFBSSxDQUFDa0IsU0FBUyxJQUFJLENBQUM7TUFDckMsTUFBTUMsT0FBTyxHQUFHbkIsSUFBSSxDQUFDbUIsT0FBTyxJQUFJbkIsSUFBSSxDQUFDUyxRQUFRLElBQUksQ0FBQzs7TUFFbEQ7TUFDQSxJQUFJUyxTQUFTLEdBQUcsQ0FBQyxJQUFJK0IsT0FBTyxHQUFHL0IsU0FBUyxFQUFFO1FBQ3hDK0IsT0FBTyxHQUFHL0IsU0FBUztRQUNuQk0sS0FBSyxDQUFDakIsV0FBVyxHQUFHVyxTQUFTO01BQy9CLENBQUMsTUFBTSxJQUFJQyxPQUFPLEdBQUduQixJQUFJLENBQUNTLFFBQVEsSUFBSXdDLE9BQU8sR0FBRzlCLE9BQU8sRUFBRTtRQUN2RDhCLE9BQU8sR0FBRzlCLE9BQU87UUFDakJLLEtBQUssQ0FBQ2pCLFdBQVcsR0FBR1ksT0FBTztRQUMzQkssS0FBSyxDQUFDMEIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2Y1QyxZQUFZLENBQUMsS0FBSyxDQUFDOztRQUVuQjtRQUNBSixXQUFXLEdBQUcsQ0FBQztNQUNqQjtNQUVBTSxjQUFjLENBQUN5QyxPQUFPLENBQUM7TUFDdkJoRCxnQkFBZ0IsR0FBR2dELE9BQU8sQ0FBQztJQUM3QjtFQUNGLENBQUM7RUFFRCxNQUFNRSxVQUFVLEdBQUdBLENBQUEsS0FBTTtJQUN2QjdDLFlBQVksQ0FBQyxJQUFJLENBQUM7RUFDcEIsQ0FBQztFQUVELE1BQU04QyxXQUFXLEdBQUdBLENBQUEsS0FBTTtJQUN4QjlDLFlBQVksQ0FBQyxLQUFLLENBQUM7RUFDckIsQ0FBQztFQUVELE1BQU0rQyxXQUFXLEdBQUdBLENBQUEsS0FBTTtJQUN4Qi9DLFlBQVksQ0FBQyxLQUFLLENBQUM7O0lBRW5CO0lBQ0EsSUFBSU4sSUFBSSxJQUFJSSxRQUFRLENBQUNhLE9BQU8sRUFBRTtNQUM1QixNQUFNRSxPQUFPLEdBQUduQixJQUFJLENBQUNtQixPQUFPLElBQUluQixJQUFJLENBQUNTLFFBQVEsSUFBSSxDQUFDO01BQ2xELE1BQU1GLFdBQVcsR0FBR0gsUUFBUSxDQUFDYSxPQUFPLENBQUNWLFdBQVc7O01BRWhEO01BQ0EsSUFBSUEsV0FBVyxJQUFJWSxPQUFPLEVBQUU7UUFDMUJqQixXQUFXLEdBQUcsQ0FBQztRQUNmO01BQ0Y7SUFDRjs7SUFFQTtJQUNBTSxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ2pCLElBQUlKLFFBQVEsQ0FBQ2EsT0FBTyxFQUFFO01BQ3BCYixRQUFRLENBQUNhLE9BQU8sQ0FBQ1YsV0FBVyxHQUFHLENBQUM7SUFDbEM7RUFDRixDQUFDO0VBRUQsTUFBTStDLFdBQVcsR0FBR0EsQ0FBQSxLQUFNO0lBQ3hCeEMsV0FBVyxDQUFDLElBQUksQ0FBQztJQUNqQkYsWUFBWSxDQUFDLEtBQUssQ0FBQztJQUNuQk4sWUFBWSxDQUFDLEtBQUssQ0FBQztFQUNyQixDQUFDOztFQUVEO0VBQ0EsTUFBTWlELGVBQWUsR0FBR0EsQ0FBQSxLQUFNO0lBQzVCLElBQUksQ0FBQ25ELFFBQVEsQ0FBQ2EsT0FBTyxJQUFJSixRQUFRLEVBQUU7TUFDakM7SUFDRjtJQUVBLE1BQU1XLEtBQUssR0FBR3BCLFFBQVEsQ0FBQ2EsT0FBTztJQUM5QixNQUFNQyxTQUFTLEdBQUdsQixJQUFJLEVBQUVrQixTQUFTLElBQUksQ0FBQztJQUV0QyxJQUFJYixTQUFTLEVBQUU7TUFDYm1CLEtBQUssQ0FBQzBCLEtBQUssQ0FBQyxDQUFDO0lBQ2YsQ0FBQyxNQUFNO01BQ0w7TUFDQSxJQUFJaEMsU0FBUyxHQUFHLENBQUMsSUFBSU0sS0FBSyxDQUFDakIsV0FBVyxHQUFHVyxTQUFTLEVBQUU7UUFDbERNLEtBQUssQ0FBQ2pCLFdBQVcsR0FBR1csU0FBUztNQUMvQjtNQUNBTSxLQUFLLENBQUNnQyxJQUFJLENBQUMsQ0FBQztJQUNkO0VBQ0YsQ0FBQztFQUVELE1BQU1DLFdBQVcsR0FBSXJCLENBQUMsSUFBSztJQUN6QixJQUFJLENBQUNoQyxRQUFRLENBQUNhLE9BQU8sSUFBSUosUUFBUSxJQUFJLENBQUNiLElBQUksRUFBRTtJQUU1QyxNQUFNaUQsT0FBTyxHQUFHUyxVQUFVLENBQUN0QixDQUFDLENBQUN1QixNQUFNLENBQUNDLEtBQUssQ0FBQztJQUMxQyxNQUFNMUMsU0FBUyxHQUFHbEIsSUFBSSxDQUFDa0IsU0FBUyxJQUFJLENBQUM7SUFDckMsTUFBTUMsT0FBTyxHQUFHbkIsSUFBSSxDQUFDbUIsT0FBTyxJQUFJbkIsSUFBSSxDQUFDUyxRQUFRLElBQUksQ0FBQzs7SUFFbEQ7SUFDQSxNQUFNVyxXQUFXLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDSixTQUFTLEVBQUVHLElBQUksQ0FBQ0UsR0FBRyxDQUFDSixPQUFPLEVBQUU4QixPQUFPLENBQUMsQ0FBQztJQUVuRTdDLFFBQVEsQ0FBQ2EsT0FBTyxDQUFDVixXQUFXLEdBQUdhLFdBQVc7SUFDMUNaLGNBQWMsQ0FBQ1ksV0FBVyxDQUFDO0VBQzdCLENBQUM7O0VBRUQ7RUFDQTlCLGdEQUFTLENBQUMsTUFBTTtJQUNkLE1BQU11RSxhQUFhLEdBQUl6QixDQUFDLElBQUs7TUFDM0IsSUFBSUEsQ0FBQyxDQUFDSSxJQUFJLEtBQUssT0FBTyxJQUFJeEMsSUFBSSxJQUFJLENBQUNhLFFBQVEsRUFBRTtRQUMzQ3VCLENBQUMsQ0FBQzBCLGNBQWMsQ0FBQyxDQUFDO1FBQ2xCUCxlQUFlLENBQUMsQ0FBQztNQUNuQjtJQUNGLENBQUM7SUFFRFEsTUFBTSxDQUFDQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUVILGFBQWEsQ0FBQztJQUNqRCxPQUFPLE1BQU1FLE1BQU0sQ0FBQ0UsbUJBQW1CLENBQUMsU0FBUyxFQUFFSixhQUFhLENBQUM7RUFDbkUsQ0FBQyxFQUFFLENBQUM3RCxJQUFJLEVBQUVhLFFBQVEsRUFBRVIsU0FBUyxDQUFDLENBQUM7O0VBRS9CO0VBQ0EsSUFBSSxDQUFDTCxJQUFJLEVBQUU7SUFDVCxvQkFDRWIsMERBQUE7TUFBS2dGLFNBQVMsRUFBQztJQUFlLGdCQUM1QmhGLDBEQUFBO01BQUtnRixTQUFTLEVBQUM7SUFBcUIsZ0JBQ2xDaEYsMERBQUE7TUFBS2dGLFNBQVMsRUFBQztJQUFZLGdCQUN6QmhGLDBEQUFBLENBQUNRLG9EQUFLO01BQUN5RSxJQUFJLEVBQUUsRUFBRztNQUFDQyxXQUFXLEVBQUU7SUFBSSxDQUFFLENBQ2pDLENBQUMsZUFDTmxGLDBEQUFBLGFBQUksa0JBQW9CLENBQUMsZUFDekJBLDBEQUFBO01BQUdnRixTQUFTLEVBQUM7SUFBWSxHQUFDLDRDQUE2QyxDQUNwRSxDQUNGLENBQUM7RUFFVjs7RUFFQTtFQUNBLElBQUl0RCxRQUFRLEVBQUU7SUFDWixvQkFDRTFCLDBEQUFBO01BQUtnRixTQUFTLEVBQUM7SUFBZSxnQkFDNUJoRiwwREFBQTtNQUFLZ0YsU0FBUyxFQUFDO0lBQXFCLGdCQUNsQ2hGLDBEQUFBO01BQUtnRixTQUFTLEVBQUM7SUFBa0IsZ0JBQy9CaEYsMERBQUEsQ0FBQ1Msb0RBQWE7TUFBQ3dFLElBQUksRUFBRSxFQUFHO01BQUNDLFdBQVcsRUFBRTtJQUFJLENBQUUsQ0FDekMsQ0FBQyxlQUNObEYsMERBQUEsYUFBSSxhQUFlLENBQUMsZUFDcEJBLDBEQUFBO01BQUdnRixTQUFTLEVBQUM7SUFBWSxHQUFDLDJCQUE0QixDQUFDLGVBQ3ZEaEYsMERBQUE7TUFBR2dGLFNBQVMsRUFBQztJQUFZLEdBQUVuRSxJQUFJLENBQUNzRSxRQUFZLENBQ3pDLENBQ0YsQ0FBQztFQUVWO0VBRUEsb0JBQ0VuRiwwREFBQTtJQUFLZ0YsU0FBUyxFQUFDO0VBQWUsZ0JBRTVCaEYsMERBQUE7SUFBS2dGLFNBQVMsRUFBQztFQUFpQixnQkFDOUJoRiwwREFBQTtJQUNFZ0IsR0FBRyxFQUFFQyxRQUFTO0lBQ2QrRCxTQUFTLEVBQUMsZUFBZTtJQUN6QkksZ0JBQWdCLEVBQUV2QyxvQkFBcUI7SUFDdkN3QyxZQUFZLEVBQUV4QixnQkFBaUI7SUFDL0J5QixNQUFNLEVBQUV0QixVQUFXO0lBQ25CdUIsT0FBTyxFQUFFdEIsV0FBWTtJQUNyQnVCLE9BQU8sRUFBRXRCLFdBQVk7SUFDckJ1QixPQUFPLEVBQUV0QixXQUFZO0lBQ3JCdUIsT0FBTyxFQUFDO0VBQVUsQ0FDbkIsQ0FBQyxFQUdEbEUsU0FBUyxpQkFDUnhCLDBEQUFBO0lBQUtnRixTQUFTLEVBQUM7RUFBZSxnQkFDNUJoRiwwREFBQTtJQUFLZ0YsU0FBUyxFQUFDO0VBQWlCLENBQU0sQ0FBQyxlQUN2Q2hGLDBEQUFBLFlBQUcsa0JBQW1CLENBQ25CLENBRUosQ0FBQyxlQUdOQSwwREFBQTtJQUFLZ0YsU0FBUyxFQUFDO0VBQWdCLGdCQUU3QmhGLDBEQUFBO0lBQ0VnRixTQUFTLEVBQUMsc0JBQXNCO0lBQ2hDVyxPQUFPLEVBQUV2QixlQUFnQjtJQUN6QndCLFFBQVEsRUFBRXBFLFNBQVU7SUFDcEJxRSxLQUFLLEVBQUUzRSxTQUFTLEdBQUcsZUFBZSxHQUFHO0VBQWUsR0FFbkRBLFNBQVMsZ0JBQUdsQiwwREFBQSxDQUFDTyxvREFBSztJQUFDMEUsSUFBSSxFQUFFO0VBQUcsQ0FBRSxDQUFDLGdCQUFHakYsMERBQUEsQ0FBQ00sb0RBQUk7SUFBQzJFLElBQUksRUFBRTtFQUFHLENBQUUsQ0FDOUMsQ0FBQyxlQUdUakYsMERBQUE7SUFBS2dGLFNBQVMsRUFBQztFQUFjLGdCQUMzQmhGLDBEQUFBLGVBQU9VLGlFQUFjLENBQUNVLFdBQVcsQ0FBUSxDQUFDLGVBQzFDcEIsMERBQUE7SUFBTWdGLFNBQVMsRUFBQztFQUFnQixHQUFDLEdBQU8sQ0FBQyxlQUN6Q2hGLDBEQUFBLGVBQU9VLGlFQUFjLENBQUNZLFFBQVEsQ0FBUSxDQUNuQyxDQUFDLGVBR050QiwwREFBQTtJQUFLZ0YsU0FBUyxFQUFDO0VBQW9CLGdCQUNqQ2hGLDBEQUFBO0lBQ0U4RixJQUFJLEVBQUMsT0FBTztJQUNaZCxTQUFTLEVBQUMsVUFBVTtJQUNwQjVDLEdBQUcsRUFBRXZCLElBQUksRUFBRWtCLFNBQVMsSUFBSSxDQUFFO0lBQzFCSSxHQUFHLEVBQUV0QixJQUFJLEVBQUVtQixPQUFPLElBQUlWLFFBQVEsSUFBSSxDQUFFO0lBQ3BDbUQsS0FBSyxFQUFFckQsV0FBWTtJQUNuQjJFLFFBQVEsRUFBRXpCLFdBQVk7SUFDdEIwQixJQUFJLEVBQUMsS0FBSztJQUNWSixRQUFRLEVBQUVwRSxTQUFTLElBQUlGLFFBQVEsS0FBSztFQUFFLENBQ3ZDLENBQ0UsQ0FDRixDQUFDLGVBR050QiwwREFBQTtJQUFLZ0YsU0FBUyxFQUFDO0VBQWdCLGdCQUM3QmhGLDBEQUFBO0lBQUtnRixTQUFTLEVBQUM7RUFBZSxnQkFDNUJoRiwwREFBQTtJQUFNZ0YsU0FBUyxFQUFDO0VBQWdCLEdBQUMsT0FBVyxDQUFDLGVBQzdDaEYsMERBQUE7SUFBTWdGLFNBQVMsRUFBQyxnQkFBZ0I7SUFBQ2EsS0FBSyxFQUFFaEYsSUFBSSxDQUFDc0U7RUFBUyxHQUNuRHRFLElBQUksQ0FBQ3NFLFFBQ0YsQ0FDSCxDQUFDLGVBQ05uRiwwREFBQTtJQUFLZ0YsU0FBUyxFQUFDO0VBQWUsZ0JBQzVCaEYsMERBQUE7SUFBTWdGLFNBQVMsRUFBQztFQUFnQixHQUFDLE1BQVUsQ0FBQyxlQUM1Q2hGLDBEQUFBO0lBQU1nRixTQUFTLEVBQUM7RUFBZ0IsR0FDN0JyRSxtRUFBZ0IsQ0FBQ0UsSUFBSSxDQUFDb0YsS0FBSyxFQUFFcEYsSUFBSSxDQUFDcUYsTUFBTSxDQUNyQyxDQUNILENBQUMsZUFDTmxHLDBEQUFBO0lBQUtnRixTQUFTLEVBQUM7RUFBZSxnQkFDNUJoRiwwREFBQTtJQUFNZ0YsU0FBUyxFQUFDO0VBQWdCLEdBQUMsTUFBVSxDQUFDLGVBQzVDaEYsMERBQUE7SUFBTWdGLFNBQVMsRUFBQztFQUFnQixHQUM3QnRFLGlFQUFjLENBQUMsQ0FBQ0csSUFBSSxDQUFDbUIsT0FBTyxJQUFJbkIsSUFBSSxDQUFDUyxRQUFRLEtBQUtULElBQUksQ0FBQ2tCLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FDbkUsQ0FDSCxDQUNGLENBQ0YsQ0FBQztBQUVWLENBQUMsQ0FBQztBQUVGbkIsWUFBWSxDQUFDdUYsV0FBVyxHQUFHLGNBQWM7QUFFekMsaUVBQWV2RixZQUFZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpcGZvcmdlLy4vc3JjL2NvbXBvbmVudHMvVmlkZW9QcmV2aWV3LmpzeD81ODE2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VSZWYsIHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUltcGVyYXRpdmVIYW5kbGUsIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQbGF5LCBQYXVzZSwgVmlkZW8sIEFsZXJ0VHJpYW5nbGUgfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xuaW1wb3J0IHsgZm9ybWF0RHVyYXRpb24sIGZvcm1hdFJlc29sdXRpb24gfSBmcm9tICcuLi91dGlscy9mb3JtYXR0ZXJzJztcbmltcG9ydCAnLi9WaWRlb1ByZXZpZXcuY3NzJztcblxuLyoqXG4gKiBWaWRlb1ByZXZpZXcgQ29tcG9uZW50XG4gKiBEaXNwbGF5cyB2aWRlbyBwbGF5ZXIgd2l0aCBjb250cm9scyBmb3IgdGhlIHNlbGVjdGVkIGNsaXBcbiAqL1xuY29uc3QgVmlkZW9QcmV2aWV3ID0gZm9yd2FyZFJlZigoeyBjbGlwLCBvblBsYXliYWNrQ2hhbmdlLCBvbkNsaXBFbmRlZCB9LCByZWYpID0+IHtcbiAgY29uc3QgdmlkZW9SZWYgPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IFtpc1BsYXlpbmcsIHNldElzUGxheWluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtjdXJyZW50VGltZSwgc2V0Q3VycmVudFRpbWVdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IFtkdXJhdGlvbiwgc2V0RHVyYXRpb25dID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtoYXNFcnJvciwgc2V0SGFzRXJyb3JdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIC8vIEV4cG9zZSBzZWVrIG1ldGhvZCB0byBwYXJlbnQgY29tcG9uZW50XG4gIHVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiAoe1xuICAgIHNlZWtUbzogKHRpbWUpID0+IHtcbiAgICAgIGlmICh2aWRlb1JlZi5jdXJyZW50ICYmIGNsaXApIHtcbiAgICAgICAgY29uc3QgdHJpbVN0YXJ0ID0gY2xpcC50cmltU3RhcnQgfHwgMDtcbiAgICAgICAgY29uc3QgdHJpbUVuZCA9IGNsaXAudHJpbUVuZCB8fCBjbGlwLmR1cmF0aW9uIHx8IDA7XG4gICAgICAgIFxuICAgICAgICAvLyBDbGFtcCBzZWVrIHRpbWUgd2l0aGluIHRyaW0gcmFuZ2VcbiAgICAgICAgY29uc3QgY2xhbXBlZFRpbWUgPSBNYXRoLm1heCh0cmltU3RhcnQsIE1hdGgubWluKHRyaW1FbmQsIHRpbWUpKTtcbiAgICAgICAgXG4gICAgICAgIHZpZGVvUmVmLmN1cnJlbnQuY3VycmVudFRpbWUgPSBjbGFtcGVkVGltZTtcbiAgICAgICAgc2V0Q3VycmVudFRpbWUoY2xhbXBlZFRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSkpO1xuXG4gIC8vIFJlc2V0IHN0YXRlIHdoZW4gY2xpcCBjaGFuZ2VzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFjbGlwKSB7XG4gICAgICBzZXRJc1BsYXlpbmcoZmFsc2UpO1xuICAgICAgc2V0Q3VycmVudFRpbWUoMCk7XG4gICAgICBzZXREdXJhdGlvbigwKTtcbiAgICAgIHNldEhhc0Vycm9yKGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBSZXNldCBwbGF5YmFjayBzdGF0ZSBmb3IgbmV3IGNsaXBcbiAgICBzZXRJc1BsYXlpbmcoZmFsc2UpO1xuICAgIHNldEN1cnJlbnRUaW1lKGNsaXAudHJpbVN0YXJ0IHx8IDApO1xuICAgIHNldER1cmF0aW9uKGNsaXAuZHVyYXRpb24gfHwgMCk7XG4gICAgc2V0SGFzRXJyb3IoZmFsc2UpO1xuICAgIHNldElzTG9hZGluZyh0cnVlKTtcblxuICAgIC8vIExvYWQgbmV3IHZpZGVvIHNvdXJjZVxuICAgIGlmICh2aWRlb1JlZi5jdXJyZW50KSB7XG4gICAgICBjb25zdCB2aWRlbyA9IHZpZGVvUmVmLmN1cnJlbnQ7XG4gICAgICBcbiAgICAgIC8vIFByZWZlciBjdXN0b20gcHJvdG9jb2wgdG8gYXZvaWQgZmlsZTovLyByZXN0cmljdGlvbnNcbiAgICAgIGNvbnN0IHJhd1BhdGggPSBjbGlwLmZpbGVQYXRoLnJlcGxhY2UoL15maWxlOlxcL1xcLy8sICcnKTtcbiAgICAgIGNvbnN0IHZpZGVvU3JjID0gYGxvY2FsLW1lZGlhOi8vJHtyYXdQYXRofWA7XG4gICAgICBcbiAgICAgIHZpZGVvLnNyYyA9IHZpZGVvU3JjO1xuICAgICAgdmlkZW8ubG9hZCgpO1xuXG4gICAgICB2aWRlby5vbmxvYWRlZG1ldGFkYXRhID0gKCkgPT4ge1xuICAgICAgICBoYW5kbGVMb2FkZWRNZXRhZGF0YSgpO1xuICAgICAgfTtcblxuICAgICAgdmlkZW8ub25jYW5wbGF5ID0gKCkgPT4ge1xuICAgICAgICAvLyBPbmx5IHNlZWsgdG8gdHJpbSBzdGFydCBpZiB2aWRlbyBpcyByZWFkeSBhbmQgd2UgaGF2ZSBhIHRyaW0gc3RhcnQgPiAwXG4gICAgICAgIGlmIChjbGlwLnRyaW1TdGFydCA+IDAgJiYgdmlkZW9SZWYuY3VycmVudCkge1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gdmlkZW9SZWYuY3VycmVudC5jdXJyZW50VGltZTtcbiAgICAgICAgICAvLyBPbmx5IHNlZWsgaWYgd2UncmUgbm90IGFscmVhZHkgYXQgdGhlIHRyaW0gc3RhcnRcbiAgICAgICAgICBpZiAoTWF0aC5hYnMoY3VycmVudFRpbWUgLSBjbGlwLnRyaW1TdGFydCkgPiAwLjEpIHtcbiAgICAgICAgICAgIHZpZGVvUmVmLmN1cnJlbnQuY3VycmVudFRpbWUgPSBjbGlwLnRyaW1TdGFydDtcbiAgICAgICAgICAgIHNldEN1cnJlbnRUaW1lKGNsaXAudHJpbVN0YXJ0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZpZGVvLm9uZXJyb3IgPSAoZSkgPT4ge1xuICAgICAgICBjb25zdCBtZWRpYUVycm9yID0gdmlkZW8uZXJyb3IgfHwge307XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tWaWRlb10gZXJyb3IgZXZlbnQnLCB7XG4gICAgICAgICAgc3JjOiB2aWRlb1NyYyxcbiAgICAgICAgICBjb2RlOiBtZWRpYUVycm9yLmNvZGUsXG4gICAgICAgICAgbWVzc2FnZTogbWVkaWFFcnJvci5tZXNzYWdlLFxuICAgICAgICAgIG5ldHdvcmtTdGF0ZTogdmlkZW8ubmV0d29ya1N0YXRlLFxuICAgICAgICAgIHJlYWR5U3RhdGU6IHZpZGVvLnJlYWR5U3RhdGUsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmVycm9yKCdWaWRlbyBlbGVtZW50IGVycm9yOicsIGUpO1xuICAgICAgfTtcblxuICAgICAgdmlkZW8ub25zdGFsbGVkID0gKCkgPT4gY29uc29sZS53YXJuKCdbVmlkZW9dIHN0YWxsZWQnLCB7IHNyYzogdmlkZW9TcmMgfSk7XG4gICAgICB2aWRlby5vbnN1c3BlbmQgPSAoKSA9PiBjb25zb2xlLndhcm4oJ1tWaWRlb10gc3VzcGVuZCcsIHsgc3JjOiB2aWRlb1NyYyB9KTtcbiAgICAgIHZpZGVvLm9ud2FpdGluZyA9ICgpID0+IGNvbnNvbGUud2FybignW1ZpZGVvXSB3YWl0aW5nJywgeyBzcmM6IHZpZGVvU3JjIH0pO1xuICAgIH1cbiAgfSwgW2NsaXBdKTtcblxuICAvLyBIYW5kbGUgdmlkZW8gZXZlbnRzXG4gIGNvbnN0IGhhbmRsZUxvYWRlZE1ldGFkYXRhID0gKCkgPT4ge1xuICAgIGlmICh2aWRlb1JlZi5jdXJyZW50KSB7XG4gICAgICBzZXREdXJhdGlvbih2aWRlb1JlZi5jdXJyZW50LmR1cmF0aW9uIHx8IDApO1xuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlVGltZVVwZGF0ZSA9ICgpID0+IHtcbiAgICBpZiAodmlkZW9SZWYuY3VycmVudCAmJiBjbGlwKSB7XG4gICAgICBjb25zdCB2aWRlbyA9IHZpZGVvUmVmLmN1cnJlbnQ7XG4gICAgICBsZXQgbmV3VGltZSA9IHZpZGVvLmN1cnJlbnRUaW1lO1xuICAgICAgXG4gICAgICAvLyBDbGFtcCB0aW1lIHdpdGhpbiB0cmltIHJhbmdlXG4gICAgICBjb25zdCB0cmltU3RhcnQgPSBjbGlwLnRyaW1TdGFydCB8fCAwO1xuICAgICAgY29uc3QgdHJpbUVuZCA9IGNsaXAudHJpbUVuZCB8fCBjbGlwLmR1cmF0aW9uIHx8IDA7XG4gICAgICBcbiAgICAgIC8vIE9ubHkgY2xhbXAgaWYgd2UncmUgYWN0dWFsbHkgb3V0c2lkZSB0aGUgdHJpbSByYW5nZVxuICAgICAgaWYgKHRyaW1TdGFydCA+IDAgJiYgbmV3VGltZSA8IHRyaW1TdGFydCkge1xuICAgICAgICBuZXdUaW1lID0gdHJpbVN0YXJ0O1xuICAgICAgICB2aWRlby5jdXJyZW50VGltZSA9IHRyaW1TdGFydDtcbiAgICAgIH0gZWxzZSBpZiAodHJpbUVuZCA8IGNsaXAuZHVyYXRpb24gJiYgbmV3VGltZSA+IHRyaW1FbmQpIHtcbiAgICAgICAgbmV3VGltZSA9IHRyaW1FbmQ7XG4gICAgICAgIHZpZGVvLmN1cnJlbnRUaW1lID0gdHJpbUVuZDtcbiAgICAgICAgdmlkZW8ucGF1c2UoKTsgLy8gUGF1c2Ugd2hlbiByZWFjaGluZyB0cmltIGVuZFxuICAgICAgICBzZXRJc1BsYXlpbmcoZmFsc2UpO1xuICAgICAgICBcbiAgICAgICAgLy8gVHJpZ2dlciBjb250aW51b3VzIHBsYXliYWNrIHRvIG5leHQgY2xpcFxuICAgICAgICBvbkNsaXBFbmRlZD8uKCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHNldEN1cnJlbnRUaW1lKG5ld1RpbWUpO1xuICAgICAgb25QbGF5YmFja0NoYW5nZT8uKG5ld1RpbWUpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVQbGF5ID0gKCkgPT4ge1xuICAgIHNldElzUGxheWluZyh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVQYXVzZSA9ICgpID0+IHtcbiAgICBzZXRJc1BsYXlpbmcoZmFsc2UpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUVuZGVkID0gKCkgPT4ge1xuICAgIHNldElzUGxheWluZyhmYWxzZSk7XG4gICAgXG4gICAgLy8gSWYgd2UncmUgYXQgdGhlIG5hdHVyYWwgZW5kIG9mIHRoZSB2aWRlbywgdHJpZ2dlciBjb250aW51b3VzIHBsYXliYWNrXG4gICAgaWYgKGNsaXAgJiYgdmlkZW9SZWYuY3VycmVudCkge1xuICAgICAgY29uc3QgdHJpbUVuZCA9IGNsaXAudHJpbUVuZCB8fCBjbGlwLmR1cmF0aW9uIHx8IDA7XG4gICAgICBjb25zdCBjdXJyZW50VGltZSA9IHZpZGVvUmVmLmN1cnJlbnQuY3VycmVudFRpbWU7XG4gICAgICBcbiAgICAgIC8vIElmIHdlJ3JlIGF0IG9yIHBhc3QgdGhlIHRyaW0gZW5kLCB0cmlnZ2VyIG5leHQgY2xpcFxuICAgICAgaWYgKGN1cnJlbnRUaW1lID49IHRyaW1FbmQpIHtcbiAgICAgICAgb25DbGlwRW5kZWQ/LigpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIE90aGVyd2lzZSwgcmVzZXQgdG8gYmVnaW5uaW5nXG4gICAgc2V0Q3VycmVudFRpbWUoMCk7XG4gICAgaWYgKHZpZGVvUmVmLmN1cnJlbnQpIHtcbiAgICAgIHZpZGVvUmVmLmN1cnJlbnQuY3VycmVudFRpbWUgPSAwO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVFcnJvciA9ICgpID0+IHtcbiAgICBzZXRIYXNFcnJvcih0cnVlKTtcbiAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIHNldElzUGxheWluZyhmYWxzZSk7XG4gIH07XG5cbiAgLy8gUGxheWJhY2sgY29udHJvbHNcbiAgY29uc3QgdG9nZ2xlUGxheVBhdXNlID0gKCkgPT4ge1xuICAgIGlmICghdmlkZW9SZWYuY3VycmVudCB8fCBoYXNFcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHZpZGVvID0gdmlkZW9SZWYuY3VycmVudDtcbiAgICBjb25zdCB0cmltU3RhcnQgPSBjbGlwPy50cmltU3RhcnQgfHwgMDtcbiAgICBcbiAgICBpZiAoaXNQbGF5aW5nKSB7XG4gICAgICB2aWRlby5wYXVzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBFbnN1cmUgd2UncmUgYXQgdHJpbSBzdGFydCBpZiBuZWVkZWRcbiAgICAgIGlmICh0cmltU3RhcnQgPiAwICYmIHZpZGVvLmN1cnJlbnRUaW1lIDwgdHJpbVN0YXJ0KSB7XG4gICAgICAgIHZpZGVvLmN1cnJlbnRUaW1lID0gdHJpbVN0YXJ0O1xuICAgICAgfVxuICAgICAgdmlkZW8ucGxheSgpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVTY3J1YiA9IChlKSA9PiB7XG4gICAgaWYgKCF2aWRlb1JlZi5jdXJyZW50IHx8IGhhc0Vycm9yIHx8ICFjbGlwKSByZXR1cm47XG4gICAgXG4gICAgY29uc3QgbmV3VGltZSA9IHBhcnNlRmxvYXQoZS50YXJnZXQudmFsdWUpO1xuICAgIGNvbnN0IHRyaW1TdGFydCA9IGNsaXAudHJpbVN0YXJ0IHx8IDA7XG4gICAgY29uc3QgdHJpbUVuZCA9IGNsaXAudHJpbUVuZCB8fCBjbGlwLmR1cmF0aW9uIHx8IDA7XG4gICAgXG4gICAgLy8gQ2xhbXAgc2NydWJiZXIgdmFsdWUgd2l0aGluIHRyaW0gcmFuZ2VcbiAgICBjb25zdCBjbGFtcGVkVGltZSA9IE1hdGgubWF4KHRyaW1TdGFydCwgTWF0aC5taW4odHJpbUVuZCwgbmV3VGltZSkpO1xuICAgIFxuICAgIHZpZGVvUmVmLmN1cnJlbnQuY3VycmVudFRpbWUgPSBjbGFtcGVkVGltZTtcbiAgICBzZXRDdXJyZW50VGltZShjbGFtcGVkVGltZSk7XG4gIH07XG5cbiAgLy8gS2V5Ym9hcmQgc2hvcnRjdXQgaGFuZGxlclxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZUtleURvd24gPSAoZSkgPT4ge1xuICAgICAgaWYgKGUuY29kZSA9PT0gJ1NwYWNlJyAmJiBjbGlwICYmICFoYXNFcnJvcikge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRvZ2dsZVBsYXlQYXVzZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24pO1xuICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24pO1xuICB9LCBbY2xpcCwgaGFzRXJyb3IsIGlzUGxheWluZ10pO1xuXG4gIC8vIE5vIGNsaXAgc2VsZWN0ZWQgc3RhdGVcbiAgaWYgKCFjbGlwKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlkZW8tcHJldmlld1wiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByZXZpZXctcGxhY2Vob2xkZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVtcHR5LWljb25cIj5cbiAgICAgICAgICAgIDxWaWRlbyBzaXplPXs4MH0gc3Ryb2tlV2lkdGg9ezEuNX0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aDI+Tm8gY2xpcCBzZWxlY3RlZDwvaDI+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1tdXRlZFwiPlNlbGVjdCBhIGNsaXAgZnJvbSB0aGUgdGltZWxpbmUgdG8gcHJldmlldzwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgLy8gRXJyb3Igc3RhdGVcbiAgaWYgKGhhc0Vycm9yKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlkZW8tcHJldmlld1wiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByZXZpZXctcGxhY2Vob2xkZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVtcHR5LWljb24gZXJyb3JcIj5cbiAgICAgICAgICAgIDxBbGVydFRyaWFuZ2xlIHNpemU9ezgwfSBzdHJva2VXaWR0aD17MS41fSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxoMj5WaWRlbyBFcnJvcjwvaDI+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1tdXRlZFwiPlVuYWJsZSB0byBsb2FkIHZpZGVvIGZpbGU8L3A+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1tdXRlZFwiPntjbGlwLmZpbGVOYW1lfTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZGVvLXByZXZpZXdcIj5cbiAgICAgIHsvKiBWaWRlbyBDb250YWluZXIgKi99XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInZpZGVvLWNvbnRhaW5lclwiPlxuICAgICAgICA8dmlkZW9cbiAgICAgICAgICByZWY9e3ZpZGVvUmVmfVxuICAgICAgICAgIGNsYXNzTmFtZT1cInZpZGVvLWVsZW1lbnRcIlxuICAgICAgICAgIG9uTG9hZGVkTWV0YWRhdGE9e2hhbmRsZUxvYWRlZE1ldGFkYXRhfVxuICAgICAgICAgIG9uVGltZVVwZGF0ZT17aGFuZGxlVGltZVVwZGF0ZX1cbiAgICAgICAgICBvblBsYXk9e2hhbmRsZVBsYXl9XG4gICAgICAgICAgb25QYXVzZT17aGFuZGxlUGF1c2V9XG4gICAgICAgICAgb25FbmRlZD17aGFuZGxlRW5kZWR9XG4gICAgICAgICAgb25FcnJvcj17aGFuZGxlRXJyb3J9XG4gICAgICAgICAgcHJlbG9hZD1cIm1ldGFkYXRhXCJcbiAgICAgICAgLz5cbiAgICAgICAgXG4gICAgICAgIHsvKiBMb2FkaW5nIG92ZXJsYXkgKi99XG4gICAgICAgIHtpc0xvYWRpbmcgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlkZW8tbG9hZGluZ1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2FkaW5nLXNwaW5uZXJcIj48L2Rpdj5cbiAgICAgICAgICAgIDxwPkxvYWRpbmcgdmlkZW8uLi48L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cblxuICAgICAgey8qIFZpZGVvIENvbnRyb2xzICovfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ2aWRlby1jb250cm9sc1wiPlxuICAgICAgICB7LyogUGxheS9QYXVzZSBCdXR0b24gKi99XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBjbGFzc05hbWU9XCJjb250cm9sLWJ0biBwbGF5LWJ0blwiXG4gICAgICAgICAgb25DbGljaz17dG9nZ2xlUGxheVBhdXNlfVxuICAgICAgICAgIGRpc2FibGVkPXtpc0xvYWRpbmd9XG4gICAgICAgICAgdGl0bGU9e2lzUGxheWluZyA/ICdQYXVzZSAoU3BhY2UpJyA6ICdQbGF5IChTcGFjZSknfVxuICAgICAgICA+XG4gICAgICAgICAge2lzUGxheWluZyA/IDxQYXVzZSBzaXplPXsxOH0gLz4gOiA8UGxheSBzaXplPXsxOH0gLz59XG4gICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgIHsvKiBUaW1lIERpc3BsYXkgKi99XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGltZS1kaXNwbGF5XCI+XG4gICAgICAgICAgPHNwYW4+e2Zvcm1hdER1cmF0aW9uKGN1cnJlbnRUaW1lKX08L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGltZS1zZXBhcmF0b3JcIj4vPC9zcGFuPlxuICAgICAgICAgIDxzcGFuPntmb3JtYXREdXJhdGlvbihkdXJhdGlvbil9PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7LyogU2NydWJiZXIgKi99XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2NydWJiZXItY29udGFpbmVyXCI+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwicmFuZ2VcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwic2NydWJiZXJcIlxuICAgICAgICAgICAgbWluPXtjbGlwPy50cmltU3RhcnQgfHwgMH1cbiAgICAgICAgICAgIG1heD17Y2xpcD8udHJpbUVuZCB8fCBkdXJhdGlvbiB8fCAwfVxuICAgICAgICAgICAgdmFsdWU9e2N1cnJlbnRUaW1lfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVNjcnVifVxuICAgICAgICAgICAgc3RlcD1cIjAuMVwiXG4gICAgICAgICAgICBkaXNhYmxlZD17aXNMb2FkaW5nIHx8IGR1cmF0aW9uID09PSAwfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIHsvKiBWaWRlbyBNZXRhZGF0YSAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidmlkZW8tbWV0YWRhdGFcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZXRhZGF0YS1pdGVtXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibWV0YWRhdGEtbGFiZWxcIj5GaWxlOjwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtZXRhZGF0YS12YWx1ZVwiIHRpdGxlPXtjbGlwLmZpbGVOYW1lfT5cbiAgICAgICAgICAgIHtjbGlwLmZpbGVOYW1lfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWV0YWRhdGEtaXRlbVwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1ldGFkYXRhLWxhYmVsXCI+UmVzOjwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtZXRhZGF0YS12YWx1ZVwiPlxuICAgICAgICAgICAge2Zvcm1hdFJlc29sdXRpb24oY2xpcC53aWR0aCwgY2xpcC5oZWlnaHQpfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWV0YWRhdGEtaXRlbVwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1ldGFkYXRhLWxhYmVsXCI+RHVyOjwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtZXRhZGF0YS12YWx1ZVwiPlxuICAgICAgICAgICAge2Zvcm1hdER1cmF0aW9uKChjbGlwLnRyaW1FbmQgfHwgY2xpcC5kdXJhdGlvbikgLSAoY2xpcC50cmltU3RhcnQgfHwgMCkpfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn0pO1xuXG5WaWRlb1ByZXZpZXcuZGlzcGxheU5hbWUgPSAnVmlkZW9QcmV2aWV3JztcblxuZXhwb3J0IGRlZmF1bHQgVmlkZW9QcmV2aWV3O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwiZm9yd2FyZFJlZiIsIlBsYXkiLCJQYXVzZSIsIlZpZGVvIiwiQWxlcnRUcmlhbmdsZSIsImZvcm1hdER1cmF0aW9uIiwiZm9ybWF0UmVzb2x1dGlvbiIsIlZpZGVvUHJldmlldyIsImNsaXAiLCJvblBsYXliYWNrQ2hhbmdlIiwib25DbGlwRW5kZWQiLCJyZWYiLCJ2aWRlb1JlZiIsImlzUGxheWluZyIsInNldElzUGxheWluZyIsImN1cnJlbnRUaW1lIiwic2V0Q3VycmVudFRpbWUiLCJkdXJhdGlvbiIsInNldER1cmF0aW9uIiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwiaGFzRXJyb3IiLCJzZXRIYXNFcnJvciIsInNlZWtUbyIsInRpbWUiLCJjdXJyZW50IiwidHJpbVN0YXJ0IiwidHJpbUVuZCIsImNsYW1wZWRUaW1lIiwiTWF0aCIsIm1heCIsIm1pbiIsInZpZGVvIiwicmF3UGF0aCIsImZpbGVQYXRoIiwicmVwbGFjZSIsInZpZGVvU3JjIiwic3JjIiwibG9hZCIsIm9ubG9hZGVkbWV0YWRhdGEiLCJoYW5kbGVMb2FkZWRNZXRhZGF0YSIsIm9uY2FucGxheSIsImFicyIsIm9uZXJyb3IiLCJlIiwibWVkaWFFcnJvciIsImVycm9yIiwiY29uc29sZSIsImNvZGUiLCJtZXNzYWdlIiwibmV0d29ya1N0YXRlIiwicmVhZHlTdGF0ZSIsIm9uc3RhbGxlZCIsIndhcm4iLCJvbnN1c3BlbmQiLCJvbndhaXRpbmciLCJoYW5kbGVUaW1lVXBkYXRlIiwibmV3VGltZSIsInBhdXNlIiwiaGFuZGxlUGxheSIsImhhbmRsZVBhdXNlIiwiaGFuZGxlRW5kZWQiLCJoYW5kbGVFcnJvciIsInRvZ2dsZVBsYXlQYXVzZSIsInBsYXkiLCJoYW5kbGVTY3J1YiIsInBhcnNlRmxvYXQiLCJ0YXJnZXQiLCJ2YWx1ZSIsImhhbmRsZUtleURvd24iLCJwcmV2ZW50RGVmYXVsdCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsInNpemUiLCJzdHJva2VXaWR0aCIsImZpbGVOYW1lIiwib25Mb2FkZWRNZXRhZGF0YSIsIm9uVGltZVVwZGF0ZSIsIm9uUGxheSIsIm9uUGF1c2UiLCJvbkVuZGVkIiwib25FcnJvciIsInByZWxvYWQiLCJvbkNsaWNrIiwiZGlzYWJsZWQiLCJ0aXRsZSIsInR5cGUiLCJvbkNoYW5nZSIsInN0ZXAiLCJ3aWR0aCIsImhlaWdodCIsImRpc3BsYXlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/VideoPreview.jsx\n\n}");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("2f07e15ef7973cde660e")
/******/ })();
/******/ 
/******/ }
);