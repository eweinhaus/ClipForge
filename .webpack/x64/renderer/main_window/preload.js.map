{"version":3,"file":"main_window/preload.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,W,GCCrBC,EAA2B,CAAC,ECEhC,MAAM,cAAEC,EAAa,YAAEC,EAAW,SAAEC,GDCpC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeN,EAAyBK,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaR,QAGrB,IAAID,EAASG,EAAyBK,GAAY,CAGjDP,QAAS,CAAC,GAOX,OAHAU,EAAoBH,GAAUR,EAAQA,EAAOC,QAASM,GAG/CP,EAAOC,OACf,CCnBiDC,CAAQ,KAEzDE,EAAcQ,kBAAkB,cAAe,CAE7CC,aAAeC,GAAaT,EAAYU,OAAO,gBAAiBD,GAChEE,WAAYA,IAAMX,EAAYU,OAAO,eACrCE,mBAAqBC,IAGnB,IACE,OAAOA,EAAMC,IAAIC,IACf,IACE,OAAOd,EAASe,eAAeD,EACjC,CAAE,MAAOE,GAEP,OADAC,QAAQC,MAAM,yCAA0CJ,EAAKK,KAAMH,GAC5D,IACT,IACCI,OAAOC,GAAiB,OAATA,EACpB,CAAE,MAAOL,GAEP,OADAC,QAAQC,MAAM,4CAA6CF,GACpD,EACT,GAIFM,eAAiBC,GAASxB,EAAYU,OAAO,kBAAmBc,GAChEC,iBAAmBC,GAAa1B,EAAY2B,GAAG,kBAAmBD,GAGlEE,mBAAoBA,IAAM5B,EAAYU,OAAO,yB","sources":["webpack://clipforge/external commonjs2 \"electron\"","webpack://clipforge/webpack/bootstrap","webpack://clipforge/./src/preload.js"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// See the Electron documentation for details on how to use preload scripts:\n// https://www.electronjs.org/docs/latest/tutorial/process-model#preload-scripts\n\nconst { contextBridge, ipcRenderer, webUtils } = require('electron');\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  // File operations\n  readMetadata: (filePath) => ipcRenderer.invoke('read-metadata', filePath),\n  selectFile: () => ipcRenderer.invoke('select-file'),\n  handleDroppedFiles: (files) => {\n    // Use webUtils.getPathForFile() to get the file system path from File objects\n    // This is the correct way to handle File objects with contextIsolation enabled\n    try {\n      return files.map(file => {\n        try {\n          return webUtils.getPathForFile(file);\n        } catch (err) {\n          console.error('[Preload] Error getting path for file:', file.name, err);\n          return null;\n        }\n      }).filter(path => path !== null);\n    } catch (err) {\n      console.error('[Preload] Error processing dropped files:', err);\n      return [];\n    }\n  },\n  \n  // Export operations\n  exportTimeline: (data) => ipcRenderer.invoke('export-timeline', data),\n  onExportProgress: (callback) => ipcRenderer.on('export-progress', callback),\n  \n  // Utility\n  selectSaveLocation: () => ipcRenderer.invoke('select-save-location')\n});\n"],"names":["module","exports","require","__webpack_module_cache__","contextBridge","ipcRenderer","webUtils","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","exposeInMainWorld","readMetadata","filePath","invoke","selectFile","handleDroppedFiles","files","map","file","getPathForFile","err","console","error","name","filter","path","exportTimeline","data","onExportProgress","callback","on","selectSaveLocation"],"sourceRoot":""}